from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.bot_instance import bot
from bot.db import SessionLocal, User, ShopItem
from bot.config import ROOT_ADMIN_ID
from bot.utils.achievement_checker import check_achievements


def user_shop_kb(items):
    kb = InlineKeyboardMarkup()
    for item in items:
        kb.add(
            InlineKeyboardButton(
                f"{item.name} ‚Äî {item.price}üí∞",
                callback_data=f"user_buy:{item.id}"
            )
        )
    return kb


async def user_shop(message: types.Message):
    with SessionLocal() as s:
        items = s.query(ShopItem).all()

    if not items:
        return await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç, —Ç–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!")

    await message.answer(
        "üõç <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=user_shop_kb(items),
        parse_mode="HTML"
    )


async def user_buy_confirm(call: types.CallbackQuery):
    item_id = int(call.data.split(":")[1])

    with SessionLocal() as s:
        item = s.query(ShopItem).filter_by(id=item_id).first()
        user = s.query(User).filter_by(tg_id=call.from_user.id).first()

    if not item:
        return await call.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if user.balance < item.price:
        return await call.answer("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã!", show_alert=True)

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"user_buy_ok:{item_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_buy")
    )

    await call.message.answer(
        f"–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: <b>{item.name}</b>\n"
        f"–¶–µ–Ω–∞: <b>{item.price}üí∞</b>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=kb
    )
    await call.answer()


async def cancel_buy(call: types.CallbackQuery):
    await call.message.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await call.answer()


async def user_buy_finish(call: types.CallbackQuery):
    item_id = int(call.data.split(":")[1])
    uid = call.from_user.id

    with SessionLocal() as s:
        item = s.query(ShopItem).filter_by(id=item_id).first()
        user = s.query(User).filter_by(tg_id=uid).first()

        if user.balance < item.price:
            return await call.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–∞–ª—é—Ç—ã!", show_alert=True)

        user.balance -= item.price
        s.commit()

        check_achievements(user)

        if item.item_type == "money":
            user.balance += int(item.value)
            s.commit()
            text = f"üí∞ +{item.value}"

        elif item.item_type == "privilege":
            text = f"üõ° –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {item.value}\n‚è≥ –ê–¥–º–∏–Ω –≤—ã–¥–∞—Å—Ç –≤—Ä—É—á–Ω—É—é!"
            await bot.send_message(
                ROOT_ADMIN_ID,
                f"‚ö†Ô∏è @{call.from_user.username} –∫—É–ø–∏–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é <b>{item.value}</b>",
                parse_mode="HTML"
            )

        else:
            text = f"üéÅ Roblox Item ID {item.value}\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏!"
            await bot.send_message(
                ROOT_ADMIN_ID,
                f"üéÅ @{call.from_user.username} –∫—É–ø–∏–ª Roblox Item <code>{item.value}</code>",
                parse_mode="HTML"
            )

    await call.message.answer(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n{text}", parse_mode="HTML")
    await call.answer()


def register_user_shop(dp: Dispatcher):    dp.register_message_handler(user_shop, commands=["shop"])
    dp.register_callback_query_handler(user_buy_confirm, lambda c: c.data.startswith("user_buy:"))
    dp.register_callback_query_handler(user_buy_finish, lambda c: c.data.startswith("user_buy_ok:"))
    dp.register_callback_query_handler(cancel_buy, lambda c: c.data == "cancel_buy")
