from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.db import SessionLocal, User, ShopItem
from bot.main_core import bot
from bot.config import ROOT_ADMIN_ID
from bot.utils.achievement_checker import check_achievements


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ===
def user_shop_kb(items):
    kb = InlineKeyboardMarkup()
    for item in items:
        kb.add(
            InlineKeyboardButton(
                f"{item.name} ‚Äî {item.price}üí∞",
                callback_data=f"user_buy:{item.id}"
            )
        )
    return kb


# === –ö–æ–º–∞–Ω–¥–∞: –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω ===
async def user_shop(message: types.Message):
    with SessionLocal() as s:
        items = s.query(ShopItem).all()

    if not items:
        return await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç, —Ç–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!")

    await message.answer(
        "üõç <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=user_shop_kb(items),
        parse_mode="HTML"
    )


# === Callback: –Ω–∞–∂–∞–ª –∫—É–ø–∏—Ç—å ===
async def user_buy_confirm(call: types.CallbackQuery):
    item_id = int(call.data.split(":")[1])

    with SessionLocal() as s:
        item = s.query(ShopItem).filter_by(id=item_id).first()
        user = s.query(User).filter_by(tg_id=call.from_user.id).first()

    if not item:
        return await call.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if user.balance < item.price:
        return await call.answer("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã!", show_alert=True)

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"user_buy_ok:{item_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_buy")
    )

    await call.message.answer(
        f"–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: <b>{item.name}</b>\n"
        f"–¶–µ–Ω–∞: <b>{item.price}üí∞</b>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?",
        parse_mode="HTML",
        reply_markup=kb
    )
    await call.answer()


# === Callback: –æ—Ç–º–µ–Ω–∞ ===
async def cancel_buy(call: types.CallbackQuery):
    await call.message.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await call.answer()


# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ ===
async def user_buy_finish(call: types.CallbackQuery):
    item_id = int(call.data.split(":")[1])
    uid = call.from_user.id

    with SessionLocal() as s:
        item = s.query(ShopItem).filter_by(id=item_id).first()
        user = s.query(User).filter_by(tg_id=uid).first()

        if user.balance < item.price:
            return await call.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!", show_alert=True)

        # —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        user.balance -= item.price
        s.commit()

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
        check_achievements(user)

        # –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞
        if item.item
