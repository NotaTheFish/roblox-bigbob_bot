from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from bot.states.verify_state import VerifyState
from bot.keyboards.verify_kb import verify_button, verify_check_button
from bot.utils.roblox import get_roblox_profile
from bot.db import SessionLocal, User
from random import randint
from time import sleep

# === Start verify ===
async def start_verify(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Roblox –Ω–∏–∫:")
    await VerifyState.waiting_for_username.set()


# === User enters nickname ===
async def set_username(message: types.Message, state: FSMContext):
    username = message.text.strip()

    code = randint(10000, 99999)
    
    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=message.from_user.id).first()
        user.roblox_user = username
        user.code = str(code)
        s.commit()

    text = (
        f"‚úÖ –í–∞—à Roblox –Ω–∏–∫: <b>{username}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∏–ª–∏ <b>—Å—Ç–∞—Ç—É—Å</b> Roblox:\n"
        f"<code>{code}</code>\n\n"
        "–ü–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=verify_check_button())
    await VerifyState.waiting_for_check.set()


# === Check verification ===
async def check_verify(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à Roblox –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 —Å–µ–∫—É–Ω–¥ üî•")

    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=call.from_user.id).first()
        username = user.roblox_user
        code = user.code

    sleep(2)  # –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

    desc, status = get_roblox_profile(username)

    if desc is None:
        return await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å Roblox.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    full_text = f"{desc} {status}"

    if code and code in full_text:
        with SessionLocal() as s:
            user = s.query(User).filter_by(tg_id=call.from_user.id).first()
            user.verified = True
            s.commit()

        await call.message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç Roblox —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ")
        await state.finish()
        return
    
    await call.message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await call.message.answer("–ù–∞–∂–º–∏—Ç–µ ¬´üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã:", reply_markup=verify_check_button())


# === Cancel ===
async def cancel_verify(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=verify_button())


def register_verify(dp: Dispatcher):
    dp.register_callback_query_handler(start_verify, lambda c: c.data == "start_verify", state="*")
    dp.register_message_handler(set_username, state=VerifyState.waiting_for_username)
    dp.register_callback_query_handler(check_verify, lambda c: c.data == "check_verify", state=VerifyState.waiting_for_check)
    dp.register_callback_query_handler(cancel_verify, lambda c: c.data == "cancel_verify", state="*")
