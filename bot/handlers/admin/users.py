from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.db import SessionLocal, User, Admin
from bot.main_core import bot

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(uid: int) -> bool:
    with SessionLocal() as s:
        return bool(s.query(Admin).filter_by(telegram_id=uid).first())


# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def user_card_kb(user_id, is_blocked):
    kb = InlineKeyboardMarkup(row_width=2)

    kb.add(InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data=f"give_money:{user_id}"))

    # –ø–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
    if is_blocked:
        kb.add(InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_user:{user_id}"))
    else:
        kb.add(InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user:{user_id}"))

    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users"))
    return kb


# --- /admin_users or button "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" ---

async def admin_users_list(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    with SessionLocal() as s:
        users = s.query(User).order_by(User.balance.desc()).limit(50).all()

    if not users:
        return await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    text = "üë• <b>–¢–û–ü 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
    for u in users:
        name = u.tg_username or u.username or f"ID {u.tg_id}"
        text += f"‚Ä¢ <code>{name}</code> ‚Äî üí∞ {u.balance}\n"

    text += "\nüîé –û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID, @username –∏–ª–∏ Roblox –Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞"

    await call.message.edit_text(text)


# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ ---

async def admin_search_user(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    query = message.text.strip().lstrip("@")

    with SessionLocal() as s:
        user = (
            s.query(User)
            .filter(
                (User.tg_id == query) |
                (User.tg_username == query) |
                (User.username == query)
            )
            .first()
        )

    if not user:
        return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    text = (
        f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω</b>\n"
        f"TG: @{user.tg_username}\n"
        f"TG ID: <code>{user.tg_id}</code>\n"
        f"Roblox: <code>{user.username}</code>\n"
        f"Roblox ID: <code>{user.roblox_id}</code>\n"
        f"–ë–∞–ª–∞–Ω—Å: üí∞ {user.balance}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at}\n"
    )

    await message.reply(text, reply_markup=user_card_kb(user.tg_id, user.is_blocked))



# --- callback –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ---

from bot.states.admin_states import GiveMoneyState

async def user_management_actions(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    action, user_id = call.data.split(":")
    user_id = int(user_id)

    if action == "give_money":
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º—É –≤—ã–¥–∞—ë–º
        await call.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>:",
            parse_mode="HTML"
        )
        call.bot.data["give_money_target"] = user_id
        return await GiveMoneyState.waiting_for_amount.set()

    elif action == "block_user":
    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=user_id).first()
        if not user:
            return await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        user.is_blocked = True
        s.commit()

    await call.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await bot.send_message(user_id, "‚õî –¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await call.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

elif action == "unblock_user":
    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=user_id).first()
        if not user:
            return await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        user.is_blocked = False
        s.commit()

    await call.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await bot.send_message(user_id, "‚úÖ –¢–≤–æ–π –¥–æ—Å—Ç—É–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await call.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


from aiogram.dispatcher import FSMContext

async def process_money_amount(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    try:
        amount = int(message.text)
        if amount <= 0 or amount > 1_000_000:
            return await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1 –¥–æ 1,000,000")
    except:
        return await message.reply("‚ùå –ù—É–∂–Ω–æ —á–∏—Å–ª–æ")

    user_id = message.bot.data.get("give_money_target")

    if not user_id:
        await state.finish()
        return await message.reply("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Ç–µ—Ä—è–Ω")

    with SessionLocal() as s:
        user = s.query(User).filter_by(tg_id=user_id).first()
        if not user:
            await state.finish()
            return await message.reply("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        user.balance += amount
        s.commit()

    await message.reply(
        f"‚úÖ –í—ã–¥–∞–ª–∏ <b>{amount}</b> –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>",
        parse_mode="HTML"
    )

    try:
        await bot.send_message(user_id, f"üéÅ –í–∞–º –≤—ã–¥–∞–Ω–æ <b>{amount}</b> –º–æ–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    except:
        pass

    await state.finish()


# --- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---

def register_admin_users(dp: Dispatcher):
    dp.register_callback_query_handler(admin_users_list, lambda c: c.data == "admin_users")
    dp.register_message_handler(admin_search_user, content_types=["text"])
    dp.register_callback_query_handler(
        user_management_actions,
        lambda c: c.data.startswith("give_money") or c.data.startswith("block_user") or c.data.startswith("unblock_user")
    )
    dp.register_message_handler(
        process_money_amount,
        state=GiveMoneyState.waiting_for_amount
    )
