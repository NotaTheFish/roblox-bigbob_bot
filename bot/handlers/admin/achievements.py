from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from bot.db import SessionLocal, Admin, Achievement
from bot.keyboards.admin_keyboards import admin_achievements_kb
from bot.states.admin_states import AchievementsState


def is_admin(uid: int) -> bool:
    with SessionLocal() as s:
        return bool(s.query(Admin).filter_by(telegram_id=uid).first())


async def admin_achievements_menu(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    await call.message.edit_text(
        "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
        reply_markup=admin_achievements_kb(),
    )


async def ach_add(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
    await AchievementsState.waiting_for_name.set()


async def ach_set_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await AchievementsState.waiting_for_description.set()


async def ach_set_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É (–º–æ–Ω–µ—Ç—ã):")
    await AchievementsState.waiting_for_reward.set()


async def ach_finish(message: types.Message, state: FSMContext):
    try:
        reward = int(message.text)
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    data = await state.get_data()

    with SessionLocal() as s:
        ach = Achievement(
            name=data["name"],
            description=data["description"],
            reward=reward,
        )
        s.add(ach)
        s.commit()

    await message.answer("‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
    await state.finish()


async def ach_list(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    with SessionLocal() as s:
        items = s.query(Achievement).all()

    if not items:
        return await call.message.edit_text(
            "–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
            reply_markup=admin_achievements_kb(),
        )

    text = "üèÜ <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:</b>\n\n"
    for a in items:
        text += f"‚Ä¢ {a.name} ‚Äî {a.reward}üí∞\n"

    await call.message.edit_text(
        text,
        reply_markup=admin_achievements_kb(),
        parse_mode="HTML",
    )


def register_admin_achievements(dp: Dispatcher):
    dp.register_callback_query_handler(
        admin_achievements_menu,
        lambda c: c.data == "admin_achievements",
    )
    dp.register_callback_query_handler(
        ach_add,
        lambda c: c.data == "ach_add",
    )
    dp.register_message_handler(
        ach_set_name,
        state=AchievementsState.waiting_for_name,
    )
    dp.register_message_handler(
        ach_set_description,
        state=AchievementsState.waiting_for_description,
    )
    dp.register_message_handler(
        ach_finish,
        state=AchievementsState.waiting_for_reward,
    )
    dp.register_callback_query_handler(
        ach_list,
        lambda c: c.data == "ach_list",
    )
 
