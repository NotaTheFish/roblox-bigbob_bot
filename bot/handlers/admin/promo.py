from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.states.promo_states import PromoCreateState
from bot.keyboards.admin_keyboards import admin_main_menu_kb, promo_reward_type_kb
from bot.db import SessionLocal, PromoCode, Admin
from bot.main_core import bot


def is_admin(uid: int) -> bool:
    with SessionLocal() as s:
        return bool(s.query(Admin).filter_by(telegram_id=uid).first())


# ------------ –ê–¥–º–∏–Ω: –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ------------

async def admin_promos_menu(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_create"),
        InlineKeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="promo_list"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )

    await call.message.edit_text("üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


# ------------ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ------------

async def promo_create_start(call: types.CallbackQuery):
    await call.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await PromoCreateState.waiting_for_code.set()


async def promo_set_code(message: types.Message, state: FSMContext):
    await state.update_data(code=message.text.upper())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=promo_reward_type_kb())
    await PromoCreateState.waiting_for_reward_type.set()


async def promo_set_reward_type(call: types.CallbackQuery, state: FSMContext):
    reward_type = "money" if "money" in call.data else "item"
    await state.update_data(reward_type=reward_type)

    if reward_type == "money":
        await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞–ª—é—Ç—ã –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã:")
    else:
        await call.message.answer("üéÅ –í–≤–µ–¥–∏—Ç–µ ID Roblox-–ø—Ä–µ–¥–º–µ—Ç–∞:")

    await PromoCreateState.waiting_for_reward_value.set()


async def promo_set_reward_value(message: types.Message, state: FSMContext):
    await state.update_data(reward_value=message.text)
    await message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—á–∏—Å–ª–æ):")
    await PromoCreateState.waiting_for_usage_limit.set()


async def promo_set_limit(message: types.Message, state: FSMContext):
    try:
        limit = int(message.text)
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –ß–ò–°–õ–û")

    await state.update_data(limit=limit)
    await message.answer("‚è≥ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥?")
    await PromoCreateState.waiting_for_expire_days.set()


async def promo_finish(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")

    data = await state.get_data()

    with SessionLocal() as s:
        promo = PromoCode(
            code=data["code"],
            reward_type=data["reward_type"],
            reward_value=data["reward_value"],
            usage_limit=data["limit"],
            used_count=0,
            expire_days=days
        )
        s.add(promo)
        s.commit()

    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{data['code']}</code> —Å–æ–∑–¥–∞–Ω!", parse_mode="HTML")
    await state.finish()


# ------------ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ------------

async def promo_list(call: types.CallbackQuery):
    with SessionLocal() as s:
        promos = s.query(PromoCode).all()

    if not promos:
        return await call.message.edit_text("üì¶ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç.", reply_markup=admin_main_menu_kb())

    text = "üé´ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
    kb = InlineKeyboardMarkup()

    for p in promos:
        text += f"‚Ä¢ <code>{p.code}</code> ‚Äî {p.reward_type} ({p.used_count}/{p.usage_limit})\n"
        kb.add(InlineKeyboardButton(f"‚ùå {p.code}", callback_data=f"promo_del:{p.id}"))

    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos"))
    await call.message.edit_text(text, reply_markup=kb)


# ------------ –£–¥–∞–ª–µ–Ω–∏–µ ------------

async def promo_delete(call: types.CallbackQuery):
    promo_id = int(call.data.split(":")[1])

    with SessionLocal() as s:
        promo = s.query(PromoCode).filter_by(id=promo_id).first()
        if promo:
            s.delete(promo)
            s.commit()

    await call.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ")
    await promo_list(call)


def register_admin_promos(dp: Dispatcher):
    dp.register_callback_query_handler(admin_promos_menu, lambda c: c.data == "admin_promos")
    dp.register_callback_query_handler(promo_create_start, lambda c: c.data == "promo_create")
    dp.register_message_handler(promo_set_code, state=PromoCreateState.waiting_for_code)
    dp.register_callback_query_handler(promo_set_reward_type, lambda c: c.data.startswith("promo_reward"), state=PromoCreateState.waiting_for_reward_type)
    dp.register_message_handler(promo_set_reward_value, state=PromoCreateState.waiting_for_reward_value)
    dp.register_message_handler(promo_set_limit, state=PromoCreateState.waiting_for_usage_limit)
    dp.register_message_handler(promo_finish, state=PromoCreateState.waiting_for_expire_days)
    dp.register_callback_query_handler(promo_list, lambda c: c.data == "promo_list")
    dp.register_callback_query_handler(promo_delete, lambda c: c.data.startswith("promo_del"))
