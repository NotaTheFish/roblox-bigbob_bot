from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.bot_instance import bot
from bot.config import ADMIN_LOGIN_PASSWORD, ROOT_ADMIN_ID
from bot.db import SessionLocal, Admin, AdminRequest

# ---------------- BAL: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ----------------
def is_admin(uid: int) -> bool:
    with SessionLocal() as s:
        return bool(s.query(Admin).filter_by(telegram_id=uid).first())


# ---------------- –ö–æ–º–∞–Ω–¥–∞ /admin_login ----------------
async def admin_login(message: types.Message):
    args = message.get_args()
    if not args:
        return await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:\n`/admin_login CODE`", parse_mode="Markdown")

    if args.strip() != ADMIN_LOGIN_PASSWORD:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")

    uid = message.from_user.id

    if is_admin(uid):
        return await message.reply("‚úÖ –í—ã —É–∂–µ –∞–¥–º–∏–Ω")

    with SessionLocal() as s:
        pending = s.query(AdminRequest).filter_by(telegram_id=uid, status="pending").first()
        if pending:
            return await message.reply("‚åõ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è")

        s.add(AdminRequest(
            telegram_id=uid,
            username=message.from_user.username or "unknown"
        ))
        s.commit()

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"admin_ok:{uid}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_no:{uid}")
    )

    await bot.send_message(
        ROOT_ADMIN_ID,
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º",
        reply_markup=kb
    )

    await message.reply("‚åõ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è")


# ---------------- Callback: approve / deny ----------------
async def admin_request_callback(call: types.CallbackQuery):
    uid = int(call.data.split(":")[1])

    with SessionLocal() as s:
        req = s.query(AdminRequest).filter_by(telegram_id=uid, status="pending").first()
        if not req:
            return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

        if call.data.startswith("admin_ok"):
            req.status = "approved"
            s.add(Admin(telegram_id=uid, is_root=False))
            msg = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É –æ–¥–æ–±—Ä–µ–Ω–∞"
            result = "–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–µ–Ω ‚úÖ"
        else:
            req.status = "denied"
            msg = "‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ"
            result = "–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå"

        s.commit()

    await bot.send_message(uid, msg)
    await call.message.edit_text(result)
    await call.answer()


# ---------------- Register ----------------
def register_admin_login(dp: Dispatcher):
    dp.register_message_handler(admin_login, Command("admin_login"))
    dp.register_callback_query_handler(
        admin_request_callback,
        lambda c: c.data.startswith("admin_ok") or c.data.startswith("admin_no")
    )
