import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from config import TOKEN, ADMINS
from db import users

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = users.get(user_id, {"verified": False, "roblox_user": None})
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–æ–π—Ç–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ Roblox.\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π /verify <–Ω–∏–∫_roblox> —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ /verify
@dp.message_handler(commands=['verify'])
async def verify_cmd(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args()

    if not args:
        await message.reply("‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫: `/verify roblox_nick`", parse_mode="Markdown")
        return

    code = str(random.randint(10000, 99999))
    users[user_id] = {"verified": True, "roblox_user": args, "code": code}
    await message.answer(f"‚úÖ –¢–≤–æ–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `{code}`\n"
                         "–î–æ–±–∞–≤—å –µ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ Roblox-–ø—Ä–æ—Ñ–∏–ª—è, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ /check.",
                         parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /check
@dp.message_handler(commands=['check'])
async def check_cmd(message: types.Message):
    user = users.get(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ /verify <–Ω–∏–∫>")
        return

    if user["verified"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("1Ô∏è‚É£ –°–µ—Ä–≤–µ—Ä 1", "2Ô∏è‚É£ –°–µ—Ä–≤–µ—Ä 2", "3Ô∏è‚É£ –°–µ—Ä–≤–µ—Ä 3")
        await message.answer("üéÆ –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=markup)
    else:
        await message.answer("üòï –ê–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
@dp.message_handler(lambda msg: msg.text.startswith("1Ô∏è‚É£") or msg.text.startswith("2Ô∏è‚É£") or msg.text.startswith("3Ô∏è‚É£"))
async def server_choice(message: types.Message):
    server_name = message.text
    await message.answer(f"üöÄ –ü–æ–¥–∫–ª—é—á–∞—é –∫ {server_name}...\n(–≤ –±—É–¥—É—â–µ–º —Ç—É—Ç –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Roblox)")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    from web_server import keep_alive
    keep_alive()
    executor.start_polling(dp, skip_updates=True)
