# bot/main_core.py
# aiogram==2.25.1

import asyncio
import random
import re
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ParseMode, CallbackQuery
)

from sqlalchemy import text

# --- –ö–æ–Ω—Ñ–∏–≥ ---
from bot.config import TOKEN
try:
    from bot.config import ADMIN_ROOT_IDS
except Exception:
    ADMIN_ROOT_IDS = []
try:
    from bot.config import ADMIN_LOGIN_PASSWORD
except Exception:
    ADMIN_LOGIN_PASSWORD = "CHANGE_ME_NOW"

from bot.db import SessionLocal, User, Server, PromoCode, Item

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
user_states: Dict[int, Dict[str, Any]] = {}

# -----------------------
# –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è ACL)
# -----------------------
def ensure_admins_table():
    sess = SessionLocal()
    try:
        sess.execute(text("""
            CREATE TABLE IF NOT EXISTS admins (
                telegram_id INTEGER PRIMARY KEY
            )
        """))
        sess.commit()
    finally:
        sess.close()

def is_admin(user_id: int) -> bool:
    sess = SessionLocal()
    try:
        row = sess.execute(text("SELECT telegram_id FROM admins WHERE telegram_id=:tid"), {"tid": user_id}).fetchone()
        return row is not None
    finally:
        sess.close()

def add_admin(user_id: int):
    sess = SessionLocal()
    try:
        sess.execute(text("INSERT OR IGNORE INTO admins(telegram_id) VALUES(:tid)"), {"tid": user_id})
        sess.commit()
    finally:
        sess.close()

def remove_admin(user_id: int):
    sess = SessionLocal()
    try:
        sess.execute(text("DELETE FROM admins WHERE telegram_id=:tid"), {"tid": user_id})
        sess.commit()
    finally:
        sess.close()

ensure_admins_table()

async def notify_roots(msg: str):
    if not ADMIN_ROOT_IDS:
        return
    for rid in ADMIN_ROOT_IDS:
        try:
            await bot.send_message(rid, f"üì£ <b>LOG</b>\n{msg}", parse_mode=ParseMode.HTML)
        except Exception:
            pass

# -----------------------
# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Roblox (—Ä–µ–∞–ª—å–Ω–∞—è)
# -----------------------
import requests, concurrent.futures
HTTP_TIMEOUT = 8
_executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)

def _blocking_fetch_user_id(username: str) -> Optional[int]:
    url = "https://users.roblox.com/v1/usernames/users"
    payload = {"usernames": [username], "excludeBannedUsers": True}
    r = requests.post(url, json=payload, timeout=HTTP_TIMEOUT)
    r.raise_for_status()
    data = r.json()
    if not data.get("data"):
        return None
    return data["data"][0].get("id")

def _blocking_fetch_description(user_id: int) -> Optional[str]:
    url = f"https://users.roblox.com/v1/users/{user_id}"
    r = requests.get(url, timeout=HTTP_TIMEOUT)
    r.raise_for_status()
    return r.json().get("description")

async def fetch_roblox_description(username: str) -> Optional[str]:
    loop = asyncio.get_event_loop()
    user_id = await loop.run_in_executor(_executor, _blocking_fetch_user_id, username)
    if not user_id:
        return None
    desc = await loop.run_in_executor(_executor, _blocking_fetch_description, user_id)
    return desc

# -----------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------
def kb_main() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ö° –ò–≥—Ä–∞—Ç—å"))
    kb.row(KeyboardButton("üíº –ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton("üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é"))
    kb.row(KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return kb

def kb_back() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_account() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.row(KeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.row(KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"), KeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_shop() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∏ –ö—É–ø–∏—Ç—å –∫–µ—à"))
    kb.row(KeyboardButton("üõ° –ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é"), KeyboardButton("üéí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_admin_main() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("üñ• –°–µ—Ä–≤–µ—Ä–∞"))
    kb.row(KeyboardButton("üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã"), KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"))
    kb.row(KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_admin_servers() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä"))
    kb.row(KeyboardButton("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"))
    kb.row(KeyboardButton("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_admin_settings() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üìÉ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"))
    kb.row(KeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ID)"))
    kb.row(KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ID)"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_admin_promos() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.row(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ (–≤—Å–µ)"), KeyboardButton("‚úÖ –°–ø–∏—Å–æ–∫ (–∞–∫—Ç–∏–≤–Ω—ã–µ)"))
    kb.row(KeyboardButton("‚õî –°–ø–∏—Å–æ–∫ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_admin_store() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"))
    kb.row(KeyboardButton("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

# -----------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -----------------------
def ensure_user_in_db(user_id: int) -> User:
    sess = SessionLocal()
    try:
        u = sess.query(User).filter_by(telegram_id=user_id).first()
        if not u:
            u = User(telegram_id=user_id, verified=False)
            sess.add(u)
            sess.commit()
        return u
    finally:
        sess.close()

async def show_main_menu(chat_id: int):
    user_states[chat_id] = {"screen": "main"}
    await bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main())

# -----------------------
# –ö–æ–º–∞–Ω–¥—ã: /start /verify /check
# -----------------------
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    ensure_user_in_db(message.from_user.id)
    user_states[message.from_user.id] = {"screen": "main"}
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–æ–π—Ç–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ Roblox.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /verify –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=kb_main()
    )

@dp.message_handler(commands=['verify'])
async def cmd_verify(message: types.Message):
    ensure_user_in_db(message.from_user.id)
    user_states[message.from_user.id] = {"screen": "await_nick"}
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ Roblox:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "await_nick")
async def handle_nick(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        return await show_main_menu(message.chat.id)

    nick = message.text.strip()
    user_states[message.from_user.id] = {"screen": "confirm_nick", "nick": nick}
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="nick_yes"),
           InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="nick_no"))
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä–∏–º: —ç—Ç–æ —Ç–≤–æ–π –Ω–∏–∫ –≤ Roblox?\n\n<b>{nick}</b>",
        reply_markup=kb, parse_mode=ParseMode.HTML
    )

@dp.callback_query_handler(lambda c: c.data in ("nick_yes", "nick_no"))
async def cb_confirm_nick(call: CallbackQuery):
    uid = call.from_user.id
    st = user_states.get(uid, {})
    if call.data == "nick_no":
        user_states[uid] = {"screen": "await_nick"}
        await call.message.edit_text("–û–∫–µ–π, –≤–≤–µ–¥–∏ –Ω–∏–∫ –µ—â—ë —Ä–∞–∑ ‚úçÔ∏è")
        return await call.answer()

    # nick_yes
    nick = st.get("nick")
    code = str(random.randint(10000, 99999))
    sess = SessionLocal()
    try:
        u = sess.query(User).filter_by(telegram_id=uid).first()
        if u:
            u.roblox_user = nick
            # –ø–æ–ª–µ code –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –º–æ–¥–µ–ª–∏; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤—å –≤ –ë–î
            setattr(u, "code", code)
            u.verified = False
            sess.commit()
    finally:
        sess.close()

    await call.message.edit_text(
        "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
        f"–í—Å—Ç–∞–≤—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è Roblox —ç—Ç–æ—Ç –∫–æ–¥:\n\n<code>{code}</code>\n\n"
        "–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏ /check.",
        parse_mode=ParseMode.HTML
    )
    user_states[uid] = {"screen": "main"}
    await call.answer()

@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    sess = SessionLocal()
    try:
        u = sess.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not u or not u.roblox_user:
            return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ /verify –∏ —É–∫–∞–∂–∏ –Ω–∏–∫.")

        user_code = getattr(u, "code", None)
        if not user_code:
            return await message.answer("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π /verify.")

        status_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é Roblox –ø—Ä–æ—Ñ–∏–ª—å...")
        try:
            desc = await fetch_roblox_description(u.roblox_user.strip())
        except requests.HTTPError:
            return await status_msg.edit_text("‚ö†Ô∏è Roblox API –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        except requests.RequestException:
            return await status_msg.edit_text("‚ö†Ô∏è –ù–µ—Ç —Å–≤—è–∑–∏ —Å Roblox API. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

        if desc is None:
            return await status_msg.edit_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

        if not desc.strip():
            return await status_msg.edit_text(
                "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –û—Ç–∫—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–æ–±–∞–≤—å –∫–æ–¥, –∑–∞—Ç–µ–º /check."
            )

        hay = re.sub(r"\s+", "", desc).lower()
        needle = re.sub(r"\s+", "", str(user_code)).lower()
        if needle in hay:
            u.verified = True
            sess.commit()
            await status_msg.edit_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.")
            user_states[message.from_user.id] = {"screen": "main"}
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main())
        else:
            await status_msg.edit_text(
                "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.\n"
                "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å, –∑–∞—Ç–µ–º —Å–¥–µ–ª–∞–π /check –µ—â—ë —Ä–∞–∑."
            )
    finally:
        sess.close()

# -----------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
# -----------------------
@dp.message_handler(lambda m: m.text == "‚ö° –ò–≥—Ä–∞—Ç—å")
async def menu_play(message: types.Message):
    sess = SessionLocal()
    try:
        servers = sess.query(Server).order_by(Server.number.asc()).all()
        if not servers:
            return await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=kb_main())
        kb = InlineKeyboardMarkup()
        for s in servers:
            if s.link:
                kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", url=s.link))
            else:
                kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number} ‚ùå", callback_data=f"server_closed:{s.number}"))
        await message.answer("üéÆ –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä:", reply_markup=kb)
    finally:
        sess.close()

@dp.callback_query_handler(lambda c: c.data.startswith("server_closed:"))
async def cb_server_closed(call: CallbackQuery):
    num = call.data.split(":")[1]
    await call.answer(f"–°–µ—Ä–≤–µ—Ä {num} –∑–∞–∫—Ä—ã—Ç", show_alert=True)

@dp.message_handler(lambda m: m.text == "üíº –ê–∫–∫–∞—É–Ω—Ç")
async def menu_account(message: types.Message):
    user_states[message.from_user.id] = {"screen": "account"}
    sess = SessionLocal()
    try:
        u = sess.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not u:
            ensure_user_in_db(message.from_user.id)
            return await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω. –ù–∞–∂–º–∏ –µ—â—ë —Ä–∞–∑ ¬´üíº –ê–∫–∫–∞—É–Ω—Ç¬ª.", reply_markup=kb_account())
        info = (
            f"üë§ –ù–∏–∫: {u.roblox_user or '‚Äî'}\n"
            f"üéÆ –£—Ä–æ–≤–µ–Ω—å: {u.level}\n"
            f"üíé –ö–µ—à: {u.cash}\n"
            f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: {u.items or '‚Äî'}\n"
            f"‚è± –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {u.play_time} –º–∏–Ω\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: {u.referrals}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {u.balance} –æ—Ä–µ—à–∫–æ–≤"
        )
        await message.answer(info, reply_markup=kb_account())
    finally:
        sess.close()

@dp.message_handler(lambda m: m.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def account_balance(message: types.Message):
    sess = SessionLocal()
    try:
        u = sess.query(User).filter_by(telegram_id=message.from_user.id).first()
        bal = u.balance if u else 0
    finally:
        sess.close()
    await message.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b> –æ—Ä–µ—à–∫–æ–≤.", parse_mode=ParseMode.HTML, reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def account_topup(message: types.Message):
    await message.answer("üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (EUR/UAH/RUB/crypto).", reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def account_promocode(message: types.Message):
    user_states[message.from_user.id] = {"screen": "await_promocode"}
    await message.answer("–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "await_promocode")
async def handle_promocode(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "account"}
        return await message.answer("–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=kb_account())

    code = message.text.strip()
    sess = SessionLocal()
    try:
        promo = sess.query(PromoCode).filter_by(code=code).first()
        u = sess.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not promo or (promo.max_uses is not None and promo.uses >= promo.max_uses) \
           or (promo.expires_at and datetime.utcnow() > promo.expires_at):
            return await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.", reply_markup=kb_account())

        # –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        if promo.promo_type == "value":
            u.balance += promo.value or 0
        elif promo.promo_type == "cash":
            u.cash += promo.value or 0
        elif promo.promo_type == "item":
            # –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –≤ —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            name = f"ITEM_{promo.value or 0}"
            u.items = (u.items + f",{name}") if u.items else name
        elif promo.promo_type == "discount":
            # —Å–∫–∏–¥–∫–∞ –∫–∞–∫ –æ—Ä–µ—à–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å; –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            u.balance += promo.value or 0
        elif promo.promo_type == "admin_access":
            add_admin(u.telegram_id)

        promo.uses += 1
        sess.commit()
    finally:
        sess.close()

    user_states[message.from_user.id] = {"screen": "account"}
    await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω!", reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def account_ref(message: types.Message):
    me = await bot.get_me()
    ref_link = f"https://t.me/{me.username}?start={message.from_user.id}"
    await message.answer(f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π!\nüîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {ref_link}", reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
async def account_top(message: types.Message):
    sess = SessionLocal()
    try:
        top = sess.query(User).order_by(User.level.desc()).limit(15).all()
    finally:
        sess.close()
    text = "üèÜ –¢–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(
        f"‚Ä¢ {u.roblox_user or '‚Äî'} ‚Äî —É—Ä–æ–≤–µ–Ω—å {u.level}" for u in top
    )
    await message.answer(text, reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é")
async def menu_shop(message: types.Message):
    user_states[message.from_user.id] = {"screen": "shop"}
    await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω:", reply_markup=kb_shop())

# –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def list_items_by_category(category: str) -> List[Item]:
    sess = SessionLocal()
    try:
        return sess.query(Item).filter_by(category=category, is_active=True).order_by(Item.id.asc()).all()
    finally:
        sess.close()

@dp.message_handler(lambda m: m.text in ("üí∏ –ö—É–ø–∏—Ç—å –∫–µ—à", "üõ° –ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é", "üéí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"))
async def shop_items(message: types.Message):
    category_map = {
        "üí∏ –ö—É–ø–∏—Ç—å –∫–µ—à": "cash",
        "üõ° –ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é": "privilege",
        "üéí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç": "item",
    }
    cat = category_map[message.text]
    items = list_items_by_category(cat)
    if not items:
        return await message.answer("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ.", reply_markup=kb_shop())

    kb = InlineKeyboardMarkup()
    for it in items:
        kb.add(InlineKeyboardButton(f"{it.name} ‚Äî {it.price}ü•ú", callback_data=f"buy:{it.id}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy:"))
async def cb_buy(call: CallbackQuery):
    item_id = int(call.data.split(":")[1])
    sess = SessionLocal()
    try:
        u = sess.query(User).filter_by(telegram_id=call.from_user.id).first()
        it = sess.query(Item).filter_by(id=item_id, is_active=True).first()
        if not u or not it:
            return await call.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        if u.balance < it.price:
            return await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ä–µ—à–∫–æ–≤.", show_alert=True)

        u.balance -= it.price
        if it.category == "cash":
            # –≤—ã–¥–µ—Ä–Ω–µ–º —á–∏—Å–ª–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ö–µ—à +500"
            m = re.search(r"(\d+)", it.name)
            if m:
                u.cash += int(m.group(1))
        else:
            # –¥–æ–±–∞–≤–∏–º –≤ –ø—Ä–µ–¥–º–µ—Ç—ã/–ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
            add = it.name
            u.items = (u.items + f",{add}") if u.items else add

        sess.commit()
    finally:
        sess.close()

    await call.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!", show_alert=True)
    await call.message.edit_reply_markup(None)
    await bot.send_message(call.from_user.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", reply_markup=kb_shop())

# -----------------------
# –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
# -----------------------
@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    screen = user_states.get(message.from_user.id, {}).get("screen", "main")
    if screen in ("account", "shop"):
        return await show_main_menu(message.chat.id)
    if screen.startswith("admin"):
        # –µ—Å–ª–∏ –º—ã –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞—Ö –∞–¥–º–∏–Ω–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        user_states[message.from_user.id] = {"screen": "admin"}
        return await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())
    await show_main_menu(message.chat.id)

# -----------------------
# –ê–¥–º–∏–Ω–∫–∞: –≤—Ö–æ–¥
# -----------------------
@dp.message_handler(lambda m: m.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def enter_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ /admin_login <–ø–∞—Ä–æ–ª—å> –∏ –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())

# 2FA –≤—Ö–æ–¥
@dp.message_handler(commands=["admin_login"])
async def admin_login(message: types.Message):
    args = message.get_args() if hasattr(message, "get_args") else ""
    pwd = (args or "").strip()
    if not pwd:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_login –ü–ê–†–û–õ–¨</code>", parse_mode=ParseMode.HTML)
    if pwd != ADMIN_LOGIN_PASSWORD:
        await notify_roots(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω-–≤—Ö–æ–¥–∞: {message.from_user.id}")
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve:{message.from_user.id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject:{message.from_user.id}")
    )
    cap = f"üõ° –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –∞–¥–º–∏–Ω-–ø—Ä–∞–≤ –æ—Ç @{message.from_user.username or '‚Äî'} ({message.from_user.id})"
    for rid in ADMIN_ROOT_IDS:
        try:
            await bot.send_message(rid, cap, reply_markup=kb)
        except Exception:
            pass
    await message.reply("üïì –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data.startswith("admin_approve:") or c.data.startswith("admin_reject:"))
async def cb_admin_approve(call: CallbackQuery):
    if call.from_user.id not in ADMIN_ROOT_IDS:
        return await call.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    target = int(call.data.split(":")[1])
    if call.data.startswith("admin_approve:"):
        add_admin(target)
        await notify_roots(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {target} –ø–æ–ª—É—á–∏–ª –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞.")
        try:
            await bot.send_message(target, "‚úÖ –¢–µ–±–µ –≤—ã–¥–∞–Ω—ã –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞. –ó–∞–π–¥–∏ –≤ ¬´üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª.")
        except Exception:
            pass
        await call.message.edit_text(call.message.text + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ.")
    else:
        await notify_roots(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {target} –Ω–µ –ø–æ–ª—É—á–∏–ª –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞.")
        try:
            await bot.send_message(target, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        except Exception:
            pass
        await call.message.edit_text(call.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await call.answer()

# -----------------------
# –ê–¥–º–∏–Ω–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞–≥–ª—É—à–∫–∞)
# -----------------------
@dp.message_handler(lambda m: m.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_users"}
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Å–∫–æ—Ä–æ —Ä–∞—Å—à–∏—Ä–∏–º).", reply_markup=kb_admin_main())

# -----------------------
# –ê–¥–º–∏–Ω–∫–∞: –°–µ—Ä–≤–µ—Ä–∞
# -----------------------
@dp.message_handler(lambda m: m.text == "üñ• –°–µ—Ä–≤–µ—Ä–∞")
async def admin_servers(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_servers"}
    await message.answer("üñ• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
async def admin_add_server(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    sess = SessionLocal()
    try:
        last = sess.query(Server).order_by(Server.number.desc()).first()
        next_num = (last.number + 1) if last else 1
        s = Server(number=next_num, link=None, closed_message="–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        sess.add(s)
        sess.commit()
    finally:
        sess.close()
    await notify_roots(f"‚ûï –ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä {next_num}")
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä {next_num}.", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä")
async def admin_del_last_server(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    sess = SessionLocal()
    try:
        last = sess.query(Server).order_by(Server.number.desc()).first()
        if not last:
            return await message.answer("‚ùå –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=kb_admin_servers())
        num = last.number
        sess.delete(last)
        sess.commit()
    finally:
        sess.close()
    await notify_roots(f"üóë –ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª —Å–µ—Ä–≤–µ—Ä {num}")
    await message.answer(f"üóë –£–¥–∞–ª—ë–Ω —Å–µ—Ä–≤–µ—Ä {num}.", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
async def admin_server_links(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    sess = SessionLocal()
    try:
        servers = sess.query(Server).order_by(Server.number.asc()).all()
    finally:
        sess.close()
    if not servers:
        return await message.answer("–°–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=kb_admin_servers())
    kb = InlineKeyboardMarkup()
    for s in servers:
        kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", callback_data=f"pick_srv:{s.id}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–æ–π:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("pick_srv:"))
async def cb_pick_server(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    srv_id = int(call.data.split(":")[1])
    user_states[call.from_user.id] = {"screen": "admin_srv_edit", "srv_id": srv_id}
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º:", reply_markup=None)
    await bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await call.answer()

@dp.message_handler(lambda m: m.text in ("üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", "‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"))
async def admin_srv_link_action(message: types.Message):
    st = user_states.get(message.from_user.id, {})
    if st.get("screen") != "admin_srv_edit":
        return
    if message.text == "üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É":
        user_states[message.from_user.id]["screen"] = "admin_srv_add_link"
        return await message.answer("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É Roblox:", reply_markup=kb_back())

    # —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É
    sess = SessionLocal()
    try:
        srv = sess.query(Server).filter_by(id=st.get("srv_id")).first()
        if not srv:
            return await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
        srv.link = None
        sess.commit()
        await notify_roots(f"üîó –ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª —Å—Å—ã–ª–∫—É —É —Å–µ—Ä–≤–µ—Ä–∞ {srv.number}")
    finally:
        sess.close()
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("üóë –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb_admin_main())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_srv_add_link")
async def admin_srv_add_link(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin"}
        return await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())

    link = message.text.strip()
    st = user_states.get(message.from_user.id, {})
    srv_id = st.get("srv_id")
    sess = SessionLocal()
    try:
        srv = sess.query(Server).filter_by(id=srv_id).first()
        if not srv:
            return await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
        srv.link = link
        sess.commit()
        await notify_roots(f"üîó –ê–¥–º–∏–Ω {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Å—ã–ª–∫—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {srv.number}")
    finally:
        sess.close()
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb_admin_main())

@dp.message_handler(lambda m: m.text == "üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
async def admin_srv_closed_msg(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    sess = SessionLocal()
    try:
        servers = sess.query(Server).order_by(Server.number.asc()).all()
    finally:
        sess.close()
    if not servers:
        return await message.answer("–°–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=kb_admin_servers())
    kb = InlineKeyboardMarkup()
    for s in servers:
        kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", callback_data=f"srv_msg:{s.id}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("srv_msg:"))
async def cb_srv_msg(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    srv_id = int(call.data.split(":")[1])
    user_states[call.from_user.id] = {"screen": "admin_srv_set_msg", "srv_id": srv_id}
    await call.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç¬ª):", reply_markup=None)
    await call.answer()

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_srv_set_msg")
async def admin_srv_set_msg(message: types.Message):
    text_msg = message.text.strip()
    st = user_states.get(message.from_user.id, {})
    srv_id = st.get("srv_id")
    sess = SessionLocal()
    try:
        srv = sess.query(Server).filter_by(id=srv_id).first()
        if not srv:
            return await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
        srv.closed_message = text_msg
        sess.commit()
        await notify_roots(f"üìù –ê–¥–º–∏–Ω {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {srv.number} ‚Üí ¬´{text_msg}¬ª")
    finally:
        sess.close()
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb_admin_main())

# -----------------------
# –ê–¥–º–∏–Ω–∫–∞: –ü—Ä–æ–º–æ–∫–æ–¥—ã (–ø–æ–ª–Ω—ã–π)
# -----------------------
@dp.message_handler(lambda m: m.text == "üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def admin_promos(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_promos"}
    await message.answer("üéü –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=kb_admin_promos())

@dp.message_handler(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ (–≤—Å–µ)")
async def promos_list_all(message: types.Message):
    if not is_admin(message.from_user.id): return
    sess = SessionLocal()
    try:
        promos = sess.query(PromoCode).order_by(PromoCode.id.desc()).all()
    finally:
        sess.close()
    if not promos:
        return await message.answer("–ü—É—Å—Ç–æ.", reply_markup=kb_admin_promos())
    lines = []
    now = datetime.utcnow()
    for p in promos:
        active = (p.max_uses is None or p.uses < p.max_uses) and (not p.expires_at or now <= p.expires_at)
        lines.append(f"{'‚úÖ' if active else '‚õî'} <code>{p.code}</code> ‚Ä¢ {p.promo_type} ‚Ä¢ val={p.value} ‚Ä¢ uses={p.uses}/{p.max_uses or '‚àû'} ‚Ä¢ exp={p.expires_at or '‚àû'}")
    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML, reply_markup=kb_admin_promos())

@dp.message_handler(lambda m: m.text == "‚úÖ –°–ø–∏—Å–æ–∫ (–∞–∫—Ç–∏–≤–Ω—ã–µ)")
async def promos_list_active(message: types.Message):
    if not is_admin(message.from_user.id): return
    now = datetime.utcnow()
    sess = SessionLocal()
    try:
        promos = sess.query(PromoCode).order_by(PromoCode.id.desc()).all()
    finally:
        sess.close()
    filtered = [p for p in promos if (p.max_uses is None or p.uses < p.max_uses) and (not p.expires_at or now <= p.expires_at)]
    if not filtered:
        return await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ç.", reply_markup=kb_admin_promos())
    lines = [f"‚úÖ <code>{p.code}</code> ‚Ä¢ {p.promo_type} ‚Ä¢ +{p.value}" for p in filtered]
    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML, reply_markup=kb_admin_promos())

@dp.message_handler(lambda m: m.text == "‚õî –°–ø–∏—Å–æ–∫ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)")
async def promos_list_inactive(message: types.Message):
    if not is_admin(message.from_user.id): return
    now = datetime.utcnow()
    sess = SessionLocal()
    try:
        promos = sess.query(PromoCode).order_by(PromoCode.id.desc()).all()
    finally:
        sess.close()
    filtered = [p for p in promos if (p.max_uses is not None and p.uses >= p.max_uses) or (p.expires_at and now > p.expires_at)]
    if not filtered:
        return await message.answer("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ç.", reply_markup=kb_admin_promos())
    lines = [f"‚õî <code>{p.code}</code> ‚Ä¢ {p.promo_type}" for p in filtered]
    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML, reply_markup=kb_admin_promos())

@dp.message_handler(lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def promo_delete_start(message: types.Message):
    if not is_admin(message.from_user.id): return
    user_states[message.from_user.id] = {"screen": "admin_promo_delete"}
    await message.answer("–í–≤–µ–¥–∏ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_promo_delete")
async def promo_delete_do(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin_promos"}
        return await message.answer("üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã:", reply_markup=kb_admin_promos())

    code = message.text.strip()
    sess = SessionLocal()
    try:
        p = sess.query(PromoCode).filter_by(code=code).first()
        if not p:
            return await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_promos())
        sess.delete(p)
        sess.commit()
    finally:
        sess.close()
    await notify_roots(f"üóë –ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥ {code}")
    user_states[message.from_user.id] = {"screen": "admin_promos"}
    await message.answer("‚úÖ –£–¥–∞–ª—ë–Ω.", reply_markup=kb_admin_promos())

# Wizard —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def promo_create_start(message: types.Message):
    if not is_admin(message.from_user.id): return
    user_states[message.from_user.id] = {"screen": "promo_create", "step": "type"}
    kb = InlineKeyboardMarkup()
    for t in ("value", "cash", "item", "discount", "admin_access"):
        kb.add(InlineKeyboardButton(t, callback_data=f"pc_type:{t}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("pc_type:"))
async def pc_pick_type(call: CallbackQuery):
    t = call.data.split(":")[1]
    st = {"screen": "promo_create", "step": "value", "promo_type": t}
    user_states[call.from_user.id] = st
    await call.message.edit_text(f"–¢–∏–ø: <b>{t}</b>\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).", parse_mode=ParseMode.HTML)
    await call.answer()

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "promo_create")
async def promo_create_flow(message: types.Message):
    st = user_states.get(message.from_user.id, {})
    step = st.get("step")

    # –®–∞–≥: value
    if step == "value":
        try:
            val = int(message.text.strip())
        except ValueError:
            return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        st["value"] = val
        st["step"] = "max_uses"
        user_states[message.from_user.id] = st
        return await message.answer("–°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π? (—á–∏—Å–ª–æ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '‚àû' –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ.")

    # –®–∞–≥: max_uses
    if step == "max_uses":
        txt = message.text.strip()
        if txt == "‚àû":
            st["max_uses"] = None
        else:
            try:
                st["max_uses"] = int(txt)
            except ValueError:
                return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∏–ª–∏ '‚àû'.")
        st["step"] = "duration"
        user_states[message.from_user.id] = st
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("–ú–∏–Ω—É—Ç—ã", callback_data="pc_dur:minutes"),
            InlineKeyboardButton("–ß–∞—Å—ã", callback_data="pc_dur:hours"),
            InlineKeyboardButton("–î–Ω–∏", callback_data="pc_dur:days"),
            InlineKeyboardButton("–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ", callback_data="pc_dur:inf"),
        )
        return await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("pc_dur:"))
async def pc_pick_duration(call: CallbackQuery):
    kind = call.data.split(":")[1]
    st = user_states.get(call.from_user.id, {})
    if kind == "inf":
        st["expires_at"] = None
        st["step"] = "code"
        user_states[call.from_user.id] = st
        await call.message.edit_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BIGBOB2025).")
        return await call.answer()
    # –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º —á–∏—Å–ª–æ –ø–µ—Ä–∏–æ–¥–∞
    st["dur_kind"] = kind
    st["step"] = "dur_value"
    user_states[call.from_user.id] = st
    await call.message.edit_text(f"–°–∫–æ–ª—å–∫–æ { '–º–∏–Ω—É—Ç' if kind=='minutes' else '—á–∞—Å–æ–≤' if kind=='hours' else '–¥–Ω–µ–π' }?")
    await call.answer()

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "promo_create" and user_states.get(m.from_user.id, {}).get("step") in ("dur_value", "code"))
async def promo_create_duration_and_code(message: types.Message):
    st = user_states.get(message.from_user.id, {})
    step = st.get("step")

    if step == "dur_value":
        try:
            n = int(message.text.strip())
        except ValueError:
            return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        now = datetime.utcnow()
        kind = st.get("dur_kind")
        if kind == "minutes":
            st["expires_at"] = now + timedelta(minutes=n)
        elif kind == "hours":
            st["expires_at"] = now + timedelta(hours=n)
        else:
            st["expires_at"] = now + timedelta(days=n)
        st["step"] = "code"
        user_states[message.from_user.id] = st
        return await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BIGBOB2025).")

    if step == "code":
        code = message.text.strip()
        st["code"] = code
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        sess = SessionLocal()
        try:
            p = PromoCode(
                code=st["code"],
                promo_type=st["promo_type"],
                value=st["value"],
                max_uses=st["max_uses"],
                uses=0,
                expires_at=st.get("expires_at"),
                admin_access=True if st["promo_type"] == "admin_access" else False
            )
            sess.add(p)
            sess.commit()
        finally:
            sess.close()
        await notify_roots(f"üéü –ê–¥–º–∏–Ω {message.from_user.id} —Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ {st['code']} ({st['promo_type']} val={st['value']})")
        user_states[message.from_user.id] = {"screen": "admin_promos"}
        await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω.", reply_markup=kb_admin_promos())

# -----------------------
# –ê–¥–º–∏–Ω–∫–∞: –ú–∞–≥–∞–∑–∏–Ω (–ø–æ–ª–Ω—ã–π)
# -----------------------
@dp.message_handler(lambda m: m.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def admin_store(message: types.Message):
    if not is_admin(message.from_user.id): return
    user_states[message.from_user.id] = {"screen": "admin_store"}
    await message.answer("üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º:", reply_markup=kb_admin_store())

@dp.message_handler(lambda m: m.text == "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def admin_store_list(message: types.Message):
    if not is_admin(message.from_user.id): return
    sess = SessionLocal()
    try:
        items = sess.query(Item).order_by(Item.id.asc()).all()
    finally:
        sess.close()
    if not items:
        return await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=kb_admin_store())
    lines = [f"{'‚úÖ' if it.is_active else '‚õî'} #{it.id} [{it.category}] {it.name} ‚Äî {it.price}ü•ú" for it in items]
    await message.answer("\n".join(lines), reply_markup=kb_admin_store())

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def admin_store_add(message: types.Message):
    if not is_admin(message.from_user.id): return
    user_states[message.from_user.id] = {"screen": "store_add", "step": "category"}
    kb = InlineKeyboardMarkup()
    for c in ("cash", "privilege", "item"):
        kb.add(InlineKeyboardButton(c, callback_data=f"sadd_cat:{c}"))
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("sadd_cat:"))
async def sadd_pick_cat(call: CallbackQuery):
    cat = call.data.split(":")[1]
    st = {"screen": "store_add", "step": "name", "category": cat}
    user_states[call.from_user.id] = st
    await call.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat}</b>\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", parse_mode=ParseMode.HTML)
    await call.answer()

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "store_add")
async def store_add_flow(message: types.Message):
    st = user_states.get(message.from_user.id, {})
    step = st.get("step")

    if step == "name":
        st["name"] = message.text.strip()
        st["step"] = "price"
        user_states[message.from_user.id] = st
        return await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ –æ—Ä–µ—à–∫–∞—Ö (—á–∏—Å–ª–æ):")

    if step == "price":
        try:
            price = int(message.text.strip())
        except ValueError:
            return await message.answer("–ß–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        sess = SessionLocal()
        try:
            it = Item(name=st["name"], price=price, category=st["category"], is_active=True)
            sess.add(it)
            sess.commit()
            new_id = it.id
        finally:
            sess.close()
        await notify_roots(f"üõí –ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä #{new_id} [{st['category']}] {st['name']} ‚Äî {price}ü•ú")
        user_states[message.from_user.id] = {"screen": "admin_store"}
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=kb_admin_store())

@dp.message_handler(lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def admin_store_del(message: types.Message):
    if not is_admin(message.from_user.id): return
    user_states[message.from_user.id] = {"screen": "store_del"}
    await message.answer("–í–≤–µ–¥–∏ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "store_del")
async def admin_store_del_do(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin_store"}
        return await message.answer("üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º:", reply_markup=kb_admin_store())
    try:
        iid = int(message.text.strip())
    except ValueError:
        return await message.answer("–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π ID.")
    sess = SessionLocal()
    try:
        it = sess.query(Item).filter_by(id=iid).first()
        if not it:
            return await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_store())
        sess.delete(it)
        sess.commit()
    finally:
        sess.close()
    await notify_roots(f"üóë –ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä #{iid}")
    user_states[message.from_user.id] = {"screen": "admin_store"}
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=kb_admin_store())

# -----------------------
# –ê–¥–º–∏–Ω–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------
@dp.message_handler(lambda m: m.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings(message: types.Message):
    if not is_admin(message.from_user.id): return
    user_states[message.from_user.id] = {"screen": "admin_settings"}
    await message.answer("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=kb_admin_settings())

@dp.message_handler(lambda m: m.text == "üìÉ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def admin_list_admins(message: types.Message):
    if not is_admin(message.from_user.id): return
    sess = SessionLocal()
    try:
        rows = sess.execute(text("SELECT telegram_id FROM admins ORDER BY telegram_id ASC")).fetchall()
    finally:
        sess.close()
    ids = [str(r[0]) for r in rows]
    txt = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n" + ("\n".join(ids) if ids else "‚Äî –ø—É—Å—Ç–æ ‚Äî")
    await message.answer(txt, reply_markup=kb_admin_settings())

@dp.message_handler(lambda m: m.text == "‚ûï –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ID)")
async def admin_give_by_id(message: types.Message):
    if not is_admin(message.from_user.id): return
    user_states[message.from_user.id] = {"screen": "admin_add_manual"}
    await message.answer("–í–≤–µ–¥–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_add_manual")
async def admin_add_manual(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin_settings"}
        return await message.answer("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=kb_admin_settings())
    try:
        tid = int(message.text.strip())
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
    add_admin(tid)
    await notify_roots(f"‚úÖ –ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–¥–∞–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ {tid}")
    user_states[message.from_user.id] = {"screen": "admin_settings"}
    await message.answer("‚úÖ –ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã.", reply_markup=kb_admin_settings())

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ID)")
async def admin_remove_admin_cmd(message: types.Message):
    if not is_admin(message.from_user.id): return
    user_states[message.from_user.id] = {"screen": "admin_remove_manual"}
    await message.answer("–í–≤–µ–¥–∏ Telegram ID –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_remove_manual")
async def admin_remove_manual(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin_settings"}
        return await message.answer("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=kb_admin_settings())
    try:
        tid = int(message.text.strip())
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
    remove_admin(tid)
    await notify_roots(f"üóë –ê–¥–º–∏–Ω {message.from_user.id} —Å–Ω—è–ª –ø—Ä–∞–≤–∞ —Å {tid}")
    user_states[message.from_user.id] = {"screen": "admin_settings"}
    await message.answer("‚úÖ –ü—Ä–∞–≤–∞ —Å–Ω—è—Ç—ã.", reply_markup=kb_admin_settings())
