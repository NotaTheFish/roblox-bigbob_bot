# bot/main_core.py
# aiogram v2.25.x

import random
import asyncio
import concurrent.futures
import requests
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ParseMode, CallbackQuery
)

from bot.config import TOKEN
from bot.db import SessionLocal, User, Server

# ------------------------------------------------
#  –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# ------------------------------------------------
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

ADMIN_IDS = [5813380332, 1748138420]
_executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)

# user_states —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states: Dict[int, Dict[str, Any]] = {}

# ------------------------------------------------
#  Roblox API: –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
# ------------------------------------------------
HTTP_TIMEOUT = 8

def _blocking_fetch_user_id(username: str) -> Optional[int]:
    """–ò—â–µ—Ç Roblox ID –ø–æ –Ω–∏–∫—É"""
    url = "https://users.roblox.com/v1/usernames/users"
    payload = {"usernames": [username], "excludeBannedUsers": True}
    r = requests.post(url, json=payload, timeout=HTTP_TIMEOUT)
    r.raise_for_status()
    data = r.json()
    if not data.get("data"):
        return None
    return data["data"][0].get("id")

def _blocking_fetch_description(user_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è Roblox"""
    url = f"https://users.roblox.com/v1/users/{user_id}"
    r = requests.get(url, timeout=HTTP_TIMEOUT)
    r.raise_for_status()
    return r.json().get("description")

async def fetch_roblox_description(username: str) -> Optional[str]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞"""
    loop = asyncio.get_event_loop()
    user_id = await loop.run_in_executor(_executor, _blocking_fetch_user_id, username)
    if not user_id:
        return None
    return await loop.run_in_executor(_executor, _blocking_fetch_description, user_id)

# ------------------------------------------------
#  –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ------------------------------------------------
def kb_main() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ö° –ò–≥—Ä–∞—Ç—å"))
    kb.row(KeyboardButton("üíº –ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton("üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é"))
    kb.row(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    kb.row(KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return kb

def kb_back() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    kb.add(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return kb

def kb_account() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.row(KeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.row(KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"), KeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return kb

def kb_shop() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∏ –ö—É–ø–∏—Ç—å –∫–µ—à"))
    kb.row(KeyboardButton("üõ° –ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é"), KeyboardButton("üéí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return kb

def kb_admin_main() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("üñ• –°–µ—Ä–≤–µ—Ä–∞"))
    kb.row(KeyboardButton("üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã"), KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"))
    kb.row(KeyboardButton("‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    kb.row(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return kb

# ------------------------------------------------
#  –£—Ç–∏–ª–∏—Ç—ã
# ------------------------------------------------
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def ensure_user_in_db(user_id: int) -> User:
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        user = User(telegram_id=user_id, verified=False)
        session.add(user)
        session.commit()
    session.close()
    return user

async def show_main_menu(chat_id: int):
    user_states[chat_id] = {"screen": "main"}
    await bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main())

# ------------------------------------------------
#  /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
# ------------------------------------------------
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    ensure_user_in_db(message.from_user.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ Roblox.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ‚Äî –Ω–∞–∂–º–∏ /verify",
        reply_markup=kb_back()
    )

# ------------------------------------------------
#  /verify ‚Äî –Ω–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Roblox
# ------------------------------------------------
@dp.message_handler(commands=['verify'])
async def cmd_verify(message: types.Message):
    ensure_user_in_db(message.from_user.id)
    user_states[message.from_user.id] = {"screen": "await_nick"}
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ Roblox:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "await_nick")
async def handle_nick(message: types.Message):
    if message.text in ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥"):
        return await show_main_menu(message.chat.id)

    nick = message.text.strip()
    user_states[message.from_user.id] = {"screen": "confirm_nick", "nick": nick}

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="nick_yes"))
    kb.add(InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="nick_no"))

    await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∏–º ‚Äî —ç—Ç–æ —Ç–≤–æ–π –Ω–∏–∫ –≤ Roblox?\n\n<b>{nick}</b>", 
                         parse_mode=ParseMode.HTML, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data in ("nick_yes", "nick_no"))
async def cb_confirm_nick(call: CallbackQuery):
    uid = call.from_user.id
    if call.data == "nick_no":
        user_states[uid] = {"screen": "await_nick"}
        await call.message.edit_text("–û–∫–µ–π, –≤–≤–µ–¥–∏ –Ω–∏–∫ –µ—â—ë —Ä–∞–∑ ‚úçÔ∏è")
        return await call.answer()

    nick = user_states[uid]["nick"]
    code = str(random.randint(10000, 99999))

    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=uid).first()
    if user:
        user.roblox_user = nick
        user.code = code
        user.verified = False
        session.commit()
    session.close()

    await call.message.edit_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n–î–æ–±–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ Roblox-–ø—Ä–æ—Ñ–∏–ª—è:\n\n<code>{code}</code>\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ /check ‚Äî –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.",
        parse_mode=ParseMode.HTML
    )
    await call.answer()

# ------------------------------------------------
#  /check ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è Roblox –ø—Ä–æ—Ñ–∏–ª—è
# ------------------------------------------------
@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if not user or not user.roblox_user:
        session.close()
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π /verify –∏ —É–∫–∞–∂–∏ –Ω–∏–∫ Roblox.")

    code = user.code
    if not code:
        session.close()
        return await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ /verify –∑–∞–Ω–æ–≤–æ.")

    msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é Roblox –ø—Ä–æ—Ñ–∏–ª—å...")

    try:
        description = await fetch_roblox_description(user.roblox_user.strip())
    except Exception:
        session.close()
        return await msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Roblox API. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    if not description:
        session.close()
        return await msg.edit_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")

    if code.lower() in description.lower():
        user.verified = True
        session.commit()
        session.close()
        await msg.edit_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")
        await show_main_menu(message.chat.id)
    else:
        session.close()
        await msg.edit_text(
            "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        )

# ------------------------------------------------
#  –ú–µ–Ω—é: –ò–≥—Ä–∞—Ç—å / –ê–∫–∫–∞—É–Ω—Ç / –î–æ–Ω–∞—Ç
# ------------------------------------------------
@dp.message_handler(lambda m: m.text == "‚ö° –ò–≥—Ä–∞—Ç—å")
async def menu_play(message: types.Message):
    session = SessionLocal()
    servers = session.query(Server).order_by(Server.number.asc()).all()
    session.close()

    if not servers:
        return await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=kb_main())

    kb = InlineKeyboardMarkup()
    for s in servers:
        if s.link:
            kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", url=s.link))
        else:
            kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number} ‚ùå", callback_data=f"server_closed:{s.number}"))

    await message.answer("üéÆ –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("server_closed:"))
async def cb_server_closed(call: CallbackQuery):
    number = call.data.split(":")[1]
    await call.answer(f"–°–µ—Ä–≤–µ—Ä {number} –∑–∞–∫—Ä—ã—Ç", show_alert=True)

# ------------------------------------------------
#  –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
# ------------------------------------------------
@dp.message_handler(lambda m: m.text == "üíº –ê–∫–∫–∞—É–Ω—Ç")
async def menu_account(message: types.Message):
    session = SessionLocal()
    u = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    session.close()

    if not u:
        return await message.answer("–û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_main())

    info = (
        f"üë§ –ù–∏–∫: {u.roblox_user or '‚Äî'}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {u.balance} –æ—Ä–µ—à–∫–æ–≤\n"
        f"üíé –ö–µ—à: {u.cash}\n"
        f"üéÆ –£—Ä–æ–≤–µ–Ω—å: {u.level}\n"
        f"‚è± –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {u.play_time}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: {u.referrals}"
    )
    await message.answer(info, reply_markup=kb_account())

# ------------------------------------------------
#  –ú–µ–Ω—é –¥–æ–Ω–∞—Ç–∞
# ------------------------------------------------
@dp.message_handler(lambda m: m.text == "üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é")
async def menu_donate(message: types.Message):
    await message.answer("üíé –†–∞–∑–¥–µ–ª –¥–æ–Ω–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=kb_shop())

# ------------------------------------------------
#  –ê–¥–º–∏–Ω–∫–∞
# ------------------------------------------------
@dp.message_handler(lambda m: m.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_enter(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await message.answer("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=kb_admin_main())

@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def leave_admin(message: types.Message):
    await show_main_menu(message.chat.id)

# ------------------------------------------------
#  –ù–∞–≤–∏–≥–∞—Ü–∏—è: –ù–∞–∑–∞–¥ / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ------------------------------------------------
@dp.message_handler(lambda m: m.text in ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥"))
async def go_back(message: types.Message):
    await show_main_menu(message.chat.id)
