# bot/main_core.py
# aiogram==2.25.1

import asyncio
import random
from typing import Dict, Any, Optional, List

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ParseMode, CallbackQuery
)

from sqlalchemy import text

# ---- –∫–æ–Ω—Ñ–∏–≥ ----
try:
    from bot.config import TOKEN
except Exception:
    raise RuntimeError("–í config.py –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å TOKEN")

# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ª—É—á—à–µ –∑–∞–¥–∞—Ç—å –≤ config.py)
try:
    from bot.config import ADMIN_ROOT_IDS  # —Å–ø–∏—Å–æ–∫ ID, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
except Exception:
    ADMIN_ROOT_IDS = []  # –∑–∞–¥–∞–π –≤ config.py

try:
    from bot.config import ADMIN_LOGIN_PASSWORD  # –ø–∞—Ä–æ–ª—å –¥–ª—è /admin_login
except Exception:
    ADMIN_LOGIN_PASSWORD = "CHANGE_ME_NOW"  # –∑–∞–¥–∞–π –≤ config.py

from bot.db import SessionLocal, User, Server, PromoCode, Item

# -----------------------
#   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# -----------------------
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# -----------------------
#   –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -----------------------
user_states: Dict[int, Dict[str, Any]] = {}

# -----------------------
#   –•–µ–ª–ø–µ—Ä—ã –ë–î: —Ç–∞–±–ª–∏—Ü–∞ admins
# -----------------------
def ensure_admins_table():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É admins (telegram_id PRIMARY KEY), –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    sess = SessionLocal()
    try:
        sess.execute(text("""
            CREATE TABLE IF NOT EXISTS admins (
                telegram_id INTEGER PRIMARY KEY
            )
        """))
        sess.commit()
    finally:
        sess.close()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ admins."""
    sess = SessionLocal()
    try:
        r = sess.execute(text("SELECT telegram_id FROM admins WHERE telegram_id=:tid"), {"tid": user_id}).fetchone()
        return r is not None
    finally:
        sess.close()

def add_admin(user_id: int):
    sess = SessionLocal()
    try:
        sess.execute(text("INSERT OR IGNORE INTO admins(telegram_id) VALUES(:tid)"), {"tid": user_id})
        sess.commit()
    finally:
        sess.close()

def remove_admin(user_id: int):
    sess = SessionLocal()
    try:
        sess.execute(text("DELETE FROM admins WHERE telegram_id=:tid"), {"tid": user_id})
        sess.commit()
    finally:
        sess.close()

ensure_admins_table()

# -----------------------
#   –õ–æ–≥–∏ –¥–ª—è ROOT-–∞–¥–º–∏–Ω–æ–≤
# -----------------------
async def notify_roots(text_msg: str):
    if not ADMIN_ROOT_IDS:
        return
    for rid in ADMIN_ROOT_IDS:
        try:
            await bot.send_message(rid, f"üì£ <b>LOG</b>\n{text_msg}", parse_mode=ParseMode.HTML)
        except Exception:
            # –µ—Å–ª–∏ –∫–æ–º—É-—Ç–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–∏–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä
            pass

# -----------------------
#   –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------
def kb_main() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ö° –ò–≥—Ä–∞—Ç—å"))
    kb.row(KeyboardButton("üíº –ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton("üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é"))
    kb.row(KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return kb

def kb_back() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_account() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.row(KeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.row(KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"), KeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_shop() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∏ –ö—É–ø–∏—Ç—å –∫–µ—à"))
    kb.row(KeyboardButton("üõ° –ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é"), KeyboardButton("üéí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_admin_main() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("üñ• –°–µ—Ä–≤–µ—Ä–∞"))
    kb.row(KeyboardButton("üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã"), KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"))
    kb.row(KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    kb.row(KeyboardButton("‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    return kb

def kb_admin_servers() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä"))
    kb.row(KeyboardButton("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"))
    kb.row(KeyboardButton("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥ (–≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é)"))
    return kb

def kb_admin_settings() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∫–æ–¥—É"))
    kb.row(KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
    kb.row(KeyboardButton("üìÉ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥ (–≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é)"))
    return kb

# -----------------------
#   –£—Ç–∏–ª–∏—Ç—ã
# -----------------------
def ensure_user_in_db(user_id: int) -> User:
    sess = SessionLocal()
    try:
        u = sess.query(User).filter_by(telegram_id=user_id).first()
        if not u:
            u = User(telegram_id=user_id, verified=False)
            sess.add(u)
            sess.commit()
        return u
    finally:
        sess.close()

async def show_main_menu(chat_id: int):
    user_states[chat_id] = {"screen": "main"}
    await bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main())

# -----------------------
#   –ö–æ–º–∞–Ω–¥—ã –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É (2FA)
# -----------------------
@dp.message_handler(commands=["admin_login"])
async def admin_login(message: types.Message):
    """
    –®–∞–≥ 1: /admin_login <–ø–∞—Ä–æ–ª—å>
    –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º ROOT-–∞–¥–º–∏–Ω–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.
    –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è ‚Äî —é–∑–µ—Ä –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É admins.
    """
    parts = message.get_args().strip() if hasattr(message, "get_args") else ""
    if not parts:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_login –ü–ê–†–û–õ–¨</code>", parse_mode=ParseMode.HTML)

    pwd = parts
    if pwd != ADMIN_LOGIN_PASSWORD:
        await notify_roots(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É: @{message.from_user.username} ({message.from_user.id}), –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve:{message.from_user.id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject:{message.from_user.id}")
    )
    caption = f"üõ° –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –∞–¥–º–∏–Ω-–ø—Ä–∞–≤\n" \
              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '‚Äî'} ({message.from_user.id})"
    for rid in ADMIN_ROOT_IDS:
        try:
            await bot.send_message(rid, caption, reply_markup=kb)
        except Exception:
            pass

    await message.reply("üïì –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—è–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data.startswith("admin_approve:") or c.data.startswith("admin_reject:"))
async def cb_admin_approve(call: CallbackQuery):
    """–®–∞–≥ 2: ROOT-–∞–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É"""
    if call.from_user.id not in ADMIN_ROOT_IDS:
        return await call.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)

    target_id = int(call.data.split(":")[1])
    if call.data.startswith("admin_approve:"):
        add_admin(target_id)
        await notify_roots(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {target_id} –ø–æ–ª—É—á–∏–ª –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞.")
        try:
            await bot.send_message(target_id, "‚úÖ –¢–µ–±–µ –≤—ã–¥–∞–Ω—ã –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞. –ó–∞–π–¥–∏ –≤ ¬´üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª.")
        except Exception:
            pass
        await call.message.edit_text(call.message.text + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ.")
    else:
        await notify_roots(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {target_id} –Ω–µ –ø–æ–ª—É—á–∏–ª –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞.")
        try:
            await bot.send_message(target_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        except Exception:
            pass
        await call.message.edit_text(call.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await call.answer()

# -----------------------
#   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∫—Ä–∞—Ç–∫–æ)
# -----------------------
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    ensure_user_in_db(message.from_user.id)
    user_states[message.from_user.id] = {"screen": "main"}
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–æ–π—Ç–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ Roblox.\n"
        "–ù–∞–∂–º–∏ ¬´‚ö° –ò–≥—Ä–∞—Ç—å¬ª, –∑–∞–π–¥–∏ –≤ ¬´üíº –ê–∫–∫–∞—É–Ω—Ç¬ª –∏–ª–∏ ¬´üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é¬ª.",
        reply_markup=kb_main()
    )

@dp.message_handler(lambda m: m.text == "‚ö° –ò–≥—Ä–∞—Ç—å")
async def menu_play(message: types.Message):
    sess = SessionLocal()
    try:
        servers: List[Server] = sess.query(Server).order_by(Server.number.asc()).all()
        if not servers:
            return await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=kb_main())

        kb = InlineKeyboardMarkup()
        for s in servers:
            if s.link:
                kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", url=s.link))
            else:
                kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number} ‚ùå", callback_data=f"server_closed:{s.number}"))
        await message.answer("üéÆ –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä:", reply_markup=kb)
    finally:
        sess.close()

@dp.callback_query_handler(lambda c: c.data.startswith("server_closed:"))
async def cb_server_closed(call: CallbackQuery):
    num = call.data.split(":")[1]
    await call.answer(f"–°–µ—Ä–≤–µ—Ä {num} –∑–∞–∫—Ä—ã—Ç", show_alert=True)

def kb_account() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.row(KeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.row(KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"), KeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

@dp.message_handler(lambda m: m.text == "üíº –ê–∫–∫–∞—É–Ω—Ç")
async def menu_account(message: types.Message):
    user_states[message.from_user.id] = {"screen": "account"}
    sess = SessionLocal()
    try:
        u: Optional[User] = sess.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not u:
            ensure_user_in_db(message.from_user.id)
            return await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω. –ù–∞–∂–º–∏ –µ—â—ë —Ä–∞–∑ ¬´üíº –ê–∫–∫–∞—É–Ω—Ç¬ª.", reply_markup=kb_account())
        info = (
            f"üë§ –ù–∏–∫: {u.roblox_user or '‚Äî'}\n"
            f"üéÆ –£—Ä–æ–≤–µ–Ω—å: {u.level}\n"
            f"üíé –ö–µ—à: {u.cash}\n"
            f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: {u.items or '‚Äî'}\n"
            f"‚è± –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {u.play_time} –º–∏–Ω\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: {u.referrals}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {u.balance} –æ—Ä–µ—à–∫–æ–≤"
        )
        await message.answer(info, reply_markup=kb_account())
    finally:
        sess.close()

@dp.message_handler(lambda m: m.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def account_balance(message: types.Message):
    sess = SessionLocal()
    try:
        u = sess.query(User).filter_by(telegram_id=message.from_user.id).first()
        bal = u.balance if u else 0
    finally:
        sess.close()
    await message.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b> –æ—Ä–µ—à–∫–æ–≤.", parse_mode=ParseMode.HTML, reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def account_topup(message: types.Message):
    await message.answer("üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (EUR/UAH/RUB/crypto).", reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def account_promocode(message: types.Message):
    user_states[message.from_user.id] = {"screen": "await_promocode"}
    await message.answer("–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "await_promocode")
async def handle_promocode(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "account"}
        return await message.answer("–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=kb_account())

    code = message.text.strip()
    sess = SessionLocal()
    try:
        promo = sess.query(PromoCode).filter_by(code=code).first()
        u = sess.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not promo:
            return await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_account())
        if promo.max_uses is not None and promo.uses >= promo.max_uses:
            return await message.answer("‚åõ –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=kb_account())

        # –ø—Ä–∏–º–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        if promo.promo_type in ("discount", "value"):
            u.balance += (promo.value or 0)

        promo.uses += 1
        sess.commit()
    finally:
        sess.close()

    user_states[message.from_user.id] = {"screen": "account"}
    await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω!", reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def account_ref(message: types.Message):
    me = await bot.get_me()
    ref_link = f"https://t.me/{me.username}?start={message.from_user.id}"
    await message.answer(f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π!\nüîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {ref_link}", reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
async def account_top(message: types.Message):
    sess = SessionLocal()
    try:
        top = sess.query(User).order_by(User.level.desc()).limit(15).all()
    finally:
        sess.close()
    text = "üèÜ –¢–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(
        f"‚Ä¢ {u.roblox_user or '‚Äî'} ‚Äî —É—Ä–æ–≤–µ–Ω—å {u.level}" for u in top
    )
    await message.answer(text, reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é")
async def menu_shop(message: types.Message):
    user_states[message.from_user.id] = {"screen": "shop"}
    await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω:", reply_markup=kb_shop())

@dp.message_handler(lambda m: m.text in ("üí∏ –ö—É–ø–∏—Ç—å –∫–µ—à", "üõ° –ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é", "üéí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"))
async def shop_items(message: types.Message):
    await message.answer("üß± –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ç–æ–≤–∞—Ä—ã.", reply_markup=kb_shop())

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    screen = user_states.get(message.from_user.id, {}).get("screen", "main")
    if screen in ("account", "shop"):
        return await show_main_menu(message.chat.id)
    if screen in ("admin", "admin_users", "admin_servers", "admin_promos", "admin_store", "admin_settings",
                  "admin_srv_edit", "admin_srv_add_link"):
        user_states[message.from_user.id] = {"screen": "admin"}
        return await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())
    await show_main_menu(message.chat.id)

# -----------------------
#   –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# -----------------------
@dp.message_handler(lambda m: m.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def enter_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ /admin_login <–ø–∞—Ä–æ–ª—å> –∏ –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())

@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def leave_admin(message: types.Message):
    await show_main_menu(message.chat.id)

# ---- –ê–¥–º–∏–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞–≥–ª—É—à–∫–∞-–≤—Ö–æ–¥) ----
@dp.message_handler(lambda m: m.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_users"}
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", reply_markup=kb_admin_main())

# ---- –ê–¥–º–∏–Ω: –°–µ—Ä–≤–µ—Ä–∞ ----
@dp.message_handler(lambda m: m.text == "üñ• –°–µ—Ä–≤–µ—Ä–∞")
async def admin_servers(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_servers"}
    await message.answer("üñ• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
async def admin_add_server(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    sess = SessionLocal()
    try:
        last = sess.query(Server).order_by(Server.number.desc()).first()
        next_num = (last.number + 1) if last else 1
        s = Server(number=next_num, link=None, closed_message="–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        sess.add(s)
        sess.commit()
    finally:
        sess.close()
    await notify_roots(f"‚ûï –ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä {next_num}")
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä {next_num}.", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä")
async def admin_del_last_server(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    sess = SessionLocal()
    try:
        last = sess.query(Server).order_by(Server.number.desc()).first()
        if not last:
            return await message.answer("‚ùå –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=kb_admin_servers())
        num = last.number
        sess.delete(last)
        sess.commit()
    finally:
        sess.close()
    await notify_roots(f"üóë –ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª —Å–µ—Ä–≤–µ—Ä {num}")
    await message.answer(f"üóë –£–¥–∞–ª—ë–Ω —Å–µ—Ä–≤–µ—Ä {num}.", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
async def admin_server_links(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    sess = SessionLocal()
    try:
        servers = sess.query(Server).order_by(Server.number.asc()).all()
    finally:
        sess.close()
    if not servers:
        return await message.answer("–°–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=kb_admin_servers())
    kb = InlineKeyboardMarkup()
    for s in servers:
        kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", callback_data=f"pick_srv:{s.id}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–æ–π:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("pick_srv:"))
async def cb_pick_server(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    srv_id = int(call.data.split(":")[1])
    user_states[call.from_user.id] = {"screen": "admin_srv_edit", "srv_id": srv_id}
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥ (–≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é)"))
    await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º:", reply_markup=None)
    await bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await call.answer()

@dp.message_handler(lambda m: m.text in ("üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", "‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"))
async def admin_srv_link_action(message: types.Message):
    st = user_states.get(message.from_user.id, {})
    if st.get("screen") != "admin_srv_edit":
        return
    if message.text == "üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É":
        user_states[message.from_user.id]["screen"] = "admin_srv_add_link"
        return await message.answer("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É Roblox (–∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞):", reply_markup=kb_back())

    # —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É
    sess = SessionLocal()
    try:
        srv = sess.query(Server).filter_by(id=st.get("srv_id")).first()
        if not srv:
            return await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
        srv.link = None
        sess.commit()
        await notify_roots(f"üîó –ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª —Å—Å—ã–ª–∫—É —É —Å–µ—Ä–≤–µ—Ä–∞ {srv.number}")
    finally:
        sess.close()
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("üóë –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb_admin_main())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_srv_add_link")
async def admin_srv_add_link(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin"}
        return await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())

    link = message.text.strip()
    st = user_states.get(message.from_user.id, {})
    srv_id = st.get("srv_id")
    sess = SessionLocal()
    try:
        srv = sess.query(Server).filter_by(id=srv_id).first()
        if not srv:
            return await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
        srv.link = link
        sess.commit()
        await notify_roots(f"üîó –ê–¥–º–∏–Ω {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Å—ã–ª–∫—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {srv.number}")
    finally:
        sess.close()
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb_admin_main())

@dp.message_handler(lambda m: m.text == "üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
async def admin_srv_closed_msg(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    # –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
    sess = SessionLocal()
    try:
        servers = sess.query(Server).order_by(Server.number.asc()).all()
    finally:
        sess.close()
    if not servers:
        return await message.answer("–°–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=kb_admin_servers())
    kb = InlineKeyboardMarkup()
    for s in servers:
        kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", callback_data=f"srv_msg:{s.id}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("srv_msg:"))
async def cb_srv_msg(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    srv_id = int(call.data.split(":")[1])
    user_states[call.from_user.id] = {"screen": "admin_srv_set_msg", "srv_id": srv_id}
    await call.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç¬ª):", reply_markup=None)
    await call.answer()

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_srv_set_msg")
async def admin_srv_set_msg(message: types.Message):
    text_msg = message.text.strip()
    st = user_states.get(message.from_user.id, {})
    srv_id = st.get("srv_id")
    sess = SessionLocal()
    try:
        srv = sess.query(Server).filter_by(id=srv_id).first()
        if not srv:
            return await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
        srv.closed_message = text_msg
        sess.commit()
        await notify_roots(f"üìù –ê–¥–º–∏–Ω {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {srv.number} ‚Üí ¬´{text_msg}¬ª")
    finally:
        sess.close()
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb_admin_main())

# ---- –ê–¥–º–∏–Ω: –ü—Ä–æ–º–æ–∫–æ–¥—ã (–∑–∞–≥–ª—É—à–∫–∞) ----
@dp.message_handler(lambda m: m.text == "üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def admin_promos(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_promos"}
    await message.answer("üéü –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ/—Å–ø–∏—Å–æ–∫/—É–¥–∞–ª–µ–Ω–∏–µ) ‚Äî —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å.", reply_markup=kb_admin_main())

# ---- –ê–¥–º–∏–Ω: –ú–∞–≥–∞–∑–∏–Ω (–∑–∞–≥–ª—É—à–∫–∞) ----
@dp.message_handler(lambda m: m.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def admin_store(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_store"}
    await message.answer("üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ ‚Äî —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å.", reply_markup=kb_admin_main())

# ---- –ê–¥–º–∏–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----
@dp.message_handler(lambda m: m.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_settings"}
    await message.answer("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=kb_admin_settings())

@dp.message_handler(lambda m: m.text == "üìÉ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def admin_list_admins(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    sess = SessionLocal()
    try:
        rows = sess.execute(text("SELECT telegram_id FROM admins ORDER BY telegram_id ASC")).fetchall()
    finally:
        sess.close()
    ids = [str(r[0]) for r in rows]
    txt = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n" + ("\n".join(ids) if ids else "‚Äî –ø—É—Å—Ç–æ ‚Äî")
    await message.answer(txt, reply_markup=kb_admin_settings())

@dp.message_handler(lambda m: m.text == "‚ûï –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∫–æ–¥—É")
async def admin_give_by_code(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_add_manual"}
    await message.answer("–í–≤–µ–¥–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_add_manual")
async def admin_add_manual(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin_settings"}
        return await message.answer("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=kb_admin_settings())

    try:
        tid = int(message.text.strip())
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")

    add_admin(tid)
    await notify_roots(f"‚úÖ –ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–¥–∞–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ {tid}")
    user_states[message.from_user.id] = {"screen": "admin_settings"}
    await message.answer("‚úÖ –ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã.", reply_markup=kb_admin_settings())

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_remove_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    user_states[message.from_user.id] = {"screen": "admin_remove_manual"}
    await message.answer("–í–≤–µ–¥–∏ Telegram ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_remove_manual")
async def admin_remove_manual(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin_settings"}
        return await message.answer("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=kb_admin_settings())

    try:
        tid = int(message.text.strip())
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")

    remove_admin(tid)
    await notify_roots(f"üóë –ê–¥–º–∏–Ω {message.from_user.id} —Å–Ω—è–ª –ø—Ä–∞–≤–∞ —Å {tid}")
    user_states[message.from_user.id] = {"screen": "admin_settings"}
    await message.answer("‚úÖ –ü—Ä–∞–≤–∞ —Å–Ω—è—Ç—ã.", reply_markup=kb_admin_settings())
