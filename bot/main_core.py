# bot/main_core.py
# aiogram v2.25.1

import asyncio
import random
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ParseMode, CallbackQuery
)

from bot.config import TOKEN
from bot.db import SessionLocal, User, Server, PromoCode, Item

# -----------------------
#   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# -----------------------
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# -----------------------
#   –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# -----------------------
ADMIN_IDS = [5813380332, 1748138420]
user_states: Dict[int, Dict[str, Any]] = {}

# ---------- Roblox verification helpers ----------
import requests, concurrent.futures
HTTP_TIMEOUT = 8
_executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)

def _blocking_fetch_user_id(username: str) -> Optional[int]:
    url = "https://users.roblox.com/v1/usernames/users"
    payload = {"usernames": [username], "excludeBannedUsers": True}
    r = requests.post(url, json=payload, timeout=HTTP_TIMEOUT)
    r.raise_for_status()
    data = r.json()
    if not data.get("data"):
        return None
    return data["data"][0].get("id")

def _blocking_fetch_description(user_id: int) -> Optional[str]:
    url = f"https://users.roblox.com/v1/users/{user_id}"
    r = requests.get(url, timeout=HTTP_TIMEOUT)
    r.raise_for_status()
    return r.json().get("description")

async def fetch_roblox_description(username: str) -> Optional[str]:
    loop = asyncio.get_event_loop()
    user_id = await loop.run_in_executor(_executor, _blocking_fetch_user_id, username)
    if not user_id:
        return None
    return await loop.run_in_executor(_executor, _blocking_fetch_description, user_id)

# -----------------------
#   –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------
def kb_main() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ö° –ò–≥—Ä–∞—Ç—å"))
    kb.row(KeyboardButton("üíº –ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton("üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é"))
    kb.row(KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return kb

def kb_back() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_account() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.row(KeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.row(KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"), KeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_shop() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üí∏ –ö—É–ø–∏—Ç—å –∫–µ—à"))
    kb.row(KeyboardButton("üõ° –ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é"), KeyboardButton("üéí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return kb

def kb_admin_main() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("üñ• –°–µ—Ä–≤–µ—Ä–∞"))
    kb.row(KeyboardButton("üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã"), KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"))
    kb.row(KeyboardButton("‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    return kb

def kb_admin_servers() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä"))
    kb.row(KeyboardButton("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥ (–≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é)"))
    return kb

# -----------------------
#   –£—Ç–∏–ª–∏—Ç—ã
# -----------------------
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def ensure_user_in_db(user_id: int) -> User:
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        user = User(telegram_id=user_id, verified=False)
        session.add(user)
        session.commit()
    session.close()
    return user

async def show_main_menu(chat_id: int):
    user_states[chat_id] = {"screen": "main"}
    await bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main())

def _must_be_verified(user: User) -> bool:
    """True -> –ù–ï –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø)."""
    return not user or not user.verified

# -----------------------
#   /start /verify /check
# -----------------------
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = ensure_user_in_db(message.from_user.id)
    user_states[message.from_user.id] = {"screen": "main"}

    if not user.verified:
        return await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –ø—Ä–æ–π–¥–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
            "–ù–∞–∂–º–∏ /verify –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
        )

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_main()
    )

@dp.message_handler(commands=['verify'])
async def cmd_verify(message: types.Message):
    ensure_user_in_db(message.from_user.id)
    user_states[message.from_user.id] = {"screen": "await_nick"}
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ Roblox:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "await_nick")
async def handle_nick(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        return await show_main_menu(message.chat.id)

    nick = message.text.strip()
    user_states[message.from_user.id] = {"screen": "confirm_nick", "nick": nick}

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="nick_yes"))
    kb.add(InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="nick_no"))
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä–∏–º: —ç—Ç–æ —Ç–≤–æ–π –Ω–∏–∫ –≤ Roblox?\n\n<b>{nick}</b>",
        reply_markup=kb, parse_mode=ParseMode.HTML
    )

@dp.callback_query_handler(lambda c: c.data in ("nick_yes", "nick_no"))
async def cb_confirm_nick(call: CallbackQuery):
    uid = call.from_user.id
    state = user_states.get(uid, {})

    if call.data == "nick_no":
        user_states[uid] = {"screen": "await_nick"}
        await call.message.edit_text("–û–∫–µ–π, –≤–≤–µ–¥–∏ –Ω–∏–∫ –µ—â—ë —Ä–∞–∑ ‚úçÔ∏è")
        return await call.answer()

    # nick_yes
    nick = state.get("nick")
    code = str(random.randint(10000, 99999))

    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=uid).first()
    if user:
        user.roblox_user = nick
        user.code = code          # <‚Äî —Ç–µ–ø–µ—Ä—å –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user.verified = False
        session.commit()
    session.close()

    await call.message.edit_text(
        "‚úÖ –°—É–ø–µ—Ä! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
        f"–î–æ–±–∞–≤—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è Roblox —ç—Ç–æ—Ç –∫–æ–¥:\n\n<code>{code}</code>\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ /check ‚Äî –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø.",
        parse_mode=ParseMode.HTML
    )
    user_states[uid] = {"screen": "main"}
    await call.answer()

@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not user or not user.roblox_user:
        session.close()
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π /verify –∏ —É–∫–∞–∂–∏ –Ω–∏–∫.")

    if not user.code:
        session.close()
        return await message.answer("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π /verify.")

    status_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é Roblox –ø—Ä–æ—Ñ–∏–ª—å...")

    try:
        description = await fetch_roblox_description(user.roblox_user.strip())
    except requests.HTTPError:
        session.close()
        return await status_msg.edit_text("‚ö†Ô∏è Roblox API –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except requests.RequestException:
        session.close()
        return await status_msg.edit_text("‚ö†Ô∏è –ù–µ—Ç —Å–≤—è–∑–∏ —Å Roblox API. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")

    if description is None:
        session.close()
        return await status_msg.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        )

    if not description.strip():
        session.close()
        return await status_msg.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –û—Ç–∫—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–æ–±–∞–≤—å –∫–æ–¥, –∑–∞—Ç–µ–º /check –µ—â—ë —Ä–∞–∑."
        )

    haystack = description.replace(" ", "").lower()
    needle = str(user.code).replace(" ", "").lower()

    if needle and needle in haystack:
        user.verified = True
        # –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å –∫–æ–¥, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏:
        # user.code = None
        session.commit()
        session.close()

        await status_msg.edit_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.")
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main())
        user_states[message.from_user.id] = {"screen": "main"}
    else:
        session.close()
        await status_msg.edit_text(
            "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ ¬´–û –Ω–∞—Å¬ª, –∑–∞—Ç–µ–º /check."
        )

# -----------------------
#   –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)
# -----------------------
def _require_verified(func):
    async def wrapper(message: types.Message, *a, **kw):
        session = SessionLocal()
        u = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        session.close()
        if _must_be_verified(u):
            return await message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: /verify")
        return await func(message, *a, **kw)
    return wrapper

@dp.message_handler(lambda m: m.text == "‚ö° –ò–≥—Ä–∞—Ç—å")
@_require_verified
async def menu_play(message: types.Message):
    session = SessionLocal()
    servers = session.query(Server).order_by(Server.number.asc()).all()
    session.close()

    if not servers:
        return await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=kb_main())

    kb = InlineKeyboardMarkup()
    for s in servers:
        if s.link:
            kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", url=s.link))
        else:
            kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number} ‚ùå", callback_data=f"server_closed:{s.number}"))
    await message.answer("üéÆ –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("server_closed:"))
async def cb_server_closed(call: CallbackQuery):
    number = call.data.split(":")[1]
    await call.answer(f"–°–µ—Ä–≤–µ—Ä {number} –∑–∞–∫—Ä—ã—Ç", show_alert=True)

@dp.message_handler(lambda m: m.text == "üíº –ê–∫–∫–∞—É–Ω—Ç")
@_require_verified
async def menu_account(message: types.Message):
    user_states[message.from_user.id] = {"screen": "account"}
    session = SessionLocal()
    u = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    session.close()

    info = (
        f"üë§ –ù–∏–∫: {u.roblox_user or '‚Äî'}\n"
        f"üéÆ –£—Ä–æ–≤–µ–Ω—å: {u.level}\n"
        f"üíé –ö–µ—à: {u.cash}\n"
        f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: {u.items or '‚Äî'}\n"
        f"‚è± –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {u.play_time} –º–∏–Ω\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: {u.referrals}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {u.balance} –æ—Ä–µ—à–∫–æ–≤"
    )
    await message.answer(info, reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
@_require_verified
async def account_balance(message: types.Message):
    session = SessionLocal()
    u = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    session.close()
    bal = u.balance if u else 0
    await message.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b> –æ—Ä–µ—à–∫–æ–≤.", parse_mode=ParseMode.HTML, reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
@_require_verified
async def account_topup(message: types.Message):
    await message.answer("üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
@_require_verified
async def account_promocode(message: types.Message):
    user_states[message.from_user.id] = {"screen": "await_promocode"}
    await message.answer("–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=kb_back())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "await_promocode")
async def handle_promocode(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "account"}
        return await message.answer("–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=kb_account())

    code = message.text.strip()
    session = SessionLocal()
    promo = session.query(PromoCode).filter_by(code=code, active=True).first()
    u = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not promo:
        session.close()
        return await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_account())

    if promo.max_uses is not None and promo.uses >= promo.max_uses:
        session.close()
        return await message.answer("‚åõ –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=kb_account())

    if promo.promo_type in ("discount", "value"):
        u.balance += promo.value or 0

    promo.uses += 1
    session.commit()
    session.close()

    user_states[message.from_user.id] = {"screen": "account"}
    await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω!", reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
@_require_verified
async def account_ref(message: types.Message):
    uid = message.from_user.id
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={uid}"
    await message.answer(
        "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n"
        f"üîó –¢–≤–æ—è —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞: {ref_link}",
        reply_markup=kb_account()
    )

@dp.message_handler(lambda m: m.text == "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
@_require_verified
async def account_top(message: types.Message):
    session = SessionLocal()
    top = session.query(User).order_by(User.level.desc()).limit(15).all()
    session.close()
    text = "üèÜ –¢–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for u in top:
        text += f"‚Ä¢ {u.roblox_user or '‚Äî'} ‚Äî —É—Ä–æ–≤–µ–Ω—å {u.level}\n"
    await message.answer(text, reply_markup=kb_account())

@dp.message_handler(lambda m: m.text == "üí∞ –î–æ–Ω–∞—Ç-–º–µ–Ω—é")
@_require_verified
async def menu_shop(message: types.Message):
    user_states[message.from_user.id] = {"screen": "shop"}
    await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω:", reply_markup=kb_shop())

@dp.message_handler(lambda m: m.text in ("üí∏ –ö—É–ø–∏—Ç—å –∫–µ—à", "üõ° –ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é", "üéí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"))
@_require_verified
async def shop_items(message: types.Message):
    await message.answer("üß± –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=kb_shop())

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    screen = user_states.get(message.from_user.id, {}).get("screen", "main")
    if screen in ("account", "shop"):
        await show_main_menu(message.chat.id)
    elif screen in ("admin", "admin_users", "admin_servers", "admin_promos", "admin_store"):
        user_states[message.from_user.id] = {"screen": "admin"}
        await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())
    else:
        await show_main_menu(message.chat.id)

# -----------------------
#   –ê–¥–º–∏–Ω–∫–∞ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)
# -----------------------
@dp.message_handler(lambda m: m.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def enter_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())

@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def leave_admin(message: types.Message):
    await show_main_menu(message.chat.id)

@dp.message_handler(lambda m: m.text == "üñ• –°–µ—Ä–≤–µ—Ä–∞")
async def admin_servers(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    user_states[message.from_user.id] = {"screen": "admin_servers"}
    await message.answer("üñ• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
async def admin_add_server(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    session = SessionLocal()
    last = session.query(Server).order_by(Server.number.desc()).first()
    next_num = (last.number + 1) if last else 1
    s = Server(number=next_num, link=None, closed_message="–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    session.add(s)
    session.commit()
    session.close()
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä {next_num}.", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä")
async def admin_del_last_server(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    session = SessionLocal()
    last = session.query(Server).order_by(Server.number.desc()).first()
    if not last:
        session.close()
        return await message.answer("‚ùå –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=kb_admin_servers())
    session.delete(last)
    session.commit()
    session.close()
    await message.answer(f"üóë –£–¥–∞–ª—ë–Ω —Å–µ—Ä–≤–µ—Ä {last.number}.", reply_markup=kb_admin_servers())

@dp.message_handler(lambda m: m.text == "üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
async def admin_server_links(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    session = SessionLocal()
    servers = session.query(Server).order_by(Server.number.asc()).all()
    session.close()
    if not servers:
        return await message.answer("–°–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=kb_admin_servers())
    kb = InlineKeyboardMarkup()
    for s in servers:
        kb.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", callback_data=f"pick_srv:{s.id}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–æ–π:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("pick_srv:"))
async def cb_pick_server(call: CallbackQuery):
    srv_id = int(call.data.split(":")[1])
    user_states[call.from_user.id] = {"screen": "admin_srv_edit", "srv_id": srv_id}
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥ (–≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é)"))
    await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º:", reply_markup=None)
    await bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await call.answer()

@dp.message_handler(lambda m: m.text in ("üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", "‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"))
async def admin_srv_link_action(message: types.Message):
    state = user_states.get(message.from_user.id, {})
    if state.get("screen") != "admin_srv_edit":
        return
    if message.text == "üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É":
        user_states[message.from_user.id]["screen"] = "admin_srv_add_link"
        await message.answer("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É Roblox:", reply_markup=kb_back())
    else:
        session = SessionLocal()
        srv = session.query(Server).filter_by(id=state["srv_id"]).first()
        if not srv:
            session.close()
            return await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
        srv.link = None
        session.commit()
        session.close()
        user_states[message.from_user.id] = {"screen": "admin"}
        await message.answer("üóë –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb_admin_main())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("screen") == "admin_srv_add_link")
async def admin_srv_add_link(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[message.from_user.id] = {"screen": "admin"}
        return await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())

    link = message.text.strip()
    state = user_states.get(message.from_user.id, {})
    srv_id = state.get("srv_id")
    if not srv_id:
        user_states[message.from_user.id] = {"screen": "admin"}
        return await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Ç–µ—Ä—è–Ω.", reply_markup=kb_admin_main())

    session = SessionLocal()
    srv = session.query(Server).filter_by(id=srv_id).first()
    if not srv:
        session.close()
        user_states[message.from_user.id] = {"screen": "admin"}
        return await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())

    srv.link = link
    session.commit()
    session.close()

    user_states[message.from_user.id] = {"screen": "admin"}
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb_admin_main())

# -----------------------
#   –§–æ–ª–±—ç–∫
# -----------------------
@dp.message_handler()
async def fallback(message: types.Message):
    text = message.text or ""
    if text == "üîô –ù–∞–∑–∞–¥ (–≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é)":
        user_states[message.from_user.id] = {"screen": "admin"}
        return await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin_main())
    await show_main_menu(message.chat.id)
