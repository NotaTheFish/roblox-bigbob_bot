# bot/main_core.py

import random
import asyncio
from datetime import datetime, timedelta
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.executor import start_webhook
from bot.config import TOKEN, WEBHOOK_URL
from bot.db import SessionLocal, User, Server, PromoCode, Item

# --- Flask —Å–µ—Ä–≤–µ—Ä ---
app = Flask(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ ---
WEBHOOK_PATH = f"/webhook/{TOKEN.split(':')[0]}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = 8080
WEBHOOK_URL_FULL = WEBHOOK_URL + "/" + TOKEN.split(":")[0]

# --- –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç ---
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: user_states[user_id] = {"mode":"admin_servers", "step":"await_number", "payload": {...}}
user_states = {}

# --- –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (Telegram ID) ---
ADMIN_IDS = [5813380332, 1748138420]

# -----------------------------
# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
# -----------------------------
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    session = SessionLocal()
    try:
        user_id = message.from_user.id
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            user = User(telegram_id=user_id, verified=False)
            session.add(user)
            session.commit()
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–æ–π—Ç–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ Roblox.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /verify —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç."
        )
    finally:
        session.close()

@dp.message_handler(commands=['verify'])
async def verify_cmd(message: types.Message):
    user_states[message.from_user.id] = {"mode": "verify", "step": "await_nick"}
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ Roblox:")

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "verify"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_nick")
async def handle_nick(message: types.Message):
    user_id = message.from_user.id
    nick = message.text.strip()
    user_states[user_id]["nick"] = nick
    user_states[user_id]["step"] = "confirm_nick"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="confirm_yes"))
    keyboard.add(InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="confirm_no"))

    await message.answer(f"–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç–≤–æ–π –Ω–∏–∫ '{nick}' –≤–µ—Ä–Ω—ã–π?", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data in ["confirm_yes", "confirm_no"])
async def process_confirm(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–∑–¥–∞—ë–º
            user = User(telegram_id=user_id, verified=False)
            session.add(user)
            session.commit()

        if callback_query.data == "confirm_yes":
            nick = user_states.get(user_id, {}).get("nick")
            code = str(random.randint(10000, 99999))
            user.roblox_user = nick
            user.code = code
            user.verified = False
            session.commit()

            await bot.send_message(
                user_id,
                f"‚úÖ –¢–≤–æ–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `{code}`\n–î–æ–±–∞–≤—å –µ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ Roblox-–ø—Ä–æ—Ñ–∏–ª—è, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ /check.",
                parse_mode=ParseMode.MARKDOWN
            )
            user_states[user_id]["step"] = "checked"
        else:
            await bot.send_message(user_id, "–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ —Å–Ω–æ–≤–∞:")
            user_states[user_id]["step"] = "await_nick"
    finally:
        session.close()
        await callback_query.answer()

@dp.message_handler(commands=['check'])
async def check_cmd(message: types.Message):
    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.roblox_user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ /verify –∏ —É–∫–∞–∂–∏ –Ω–∏–∫")
            return

        # –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ Roblox API ‚Äî —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—Ç–∫–∞.
        user.verified = True
        session.commit()

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
        markup.add("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", "–í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ê–¥–º–∏–Ω–∞")
        await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    finally:
        session.close()

# -----------------------------
# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
# -----------------------------
@dp.message_handler(lambda msg: msg.text == "–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç")
async def my_account(message: types.Message):
    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.verified:
            await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
            return
        info = (
            f"üë§ –ù–∏–∫: {user.roblox_user or '-'}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {getattr(user, 'balance', 0) or 0} –æ—Ä–µ—à–∫–æ–≤\n"
            f"üíé –ö–µ—à: {getattr(user, 'cash', 0) or 0}\n"
            f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: {user.items or '-'}\n"
            f"üéÆ –£—Ä–æ–≤–µ–Ω—å: {getattr(user, 'level', 0) or 0}\n"
            f"‚è± –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {getattr(user, 'play_time', 0) or 0}\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: {getattr(user, 'referrals', 0) or 0}"
        )
        await message.answer(info)
    finally:
        session.close()

@dp.message_handler(lambda msg: msg.text == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
async def top_players(message: types.Message):
    session = SessionLocal()
    try:
        top = session.query(User).order_by(User.level.desc()).limit(15).all()
        if not top:
            await message.answer("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
        text = "üèÜ –¢–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤:\n"
        for u in top:
            text += f"{u.roblox_user or '‚Äì'} ‚Äî —É—Ä–æ–≤–µ–Ω—å {getattr(u, 'level', 0) or 0}\n"
        await message.answer(text)
    finally:
        session.close()

@dp.message_handler(lambda msg: msg.text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ")
async def join_game(message: types.Message):
    session = SessionLocal()
    try:
        servers = session.query(Server).order_by(Server.number.asc()).all()
        if not servers:
            await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return

        keyboard = InlineKeyboardMarkup()
        for s in servers:
            if s.link:
                # –∫–Ω–æ–ø–∫–∞ —Å URL ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç Roblox
                keyboard.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number}", url=s.link))
            else:
                keyboard.add(InlineKeyboardButton(f"–°–µ—Ä–≤–µ—Ä {s.number} ‚ùå", callback_data=f"server_closed_{s.number}"))
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä:", reply_markup=keyboard)
    finally:
        session.close()

@dp.callback_query_handler(lambda c: c.data.startswith("server_closed_"))
async def server_closed(callback_query: types.CallbackQuery):
    number = callback_query.data.split("_")[-1]
    await callback_query.answer(f"–°–µ—Ä–≤–µ—Ä {number} –∑–∞–∫—Ä—ã—Ç")

# -----------------------------
# --- –†–µ–∂–∏–º –ê–¥–º–∏–Ω–∞ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) ---
# -----------------------------
@dp.message_handler(lambda msg: msg.text == "–í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ê–¥–º–∏–Ω–∞")
async def enter_admin_mode(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ã –Ω–µ –ê–¥–º–∏–Ω")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–°–µ—Ä–≤–µ—Ä–∞")
    markup.add("–ü—Ä–æ–º–æ–∫–æ–¥—ã", "–ú–∞–≥–∞–∑–∏–Ω")
    markup.add("–í—ã–π—Ç–∏ –∏–∑ –ê–¥–º–∏–Ω–∞")
    await message.answer("‚úÖ –†–µ–∂–∏–º –ê–¥–º–∏–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=markup)

# -----------------------------
# --- –ê–¥–º–∏–Ω: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# -----------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö / –Ω–∞–π—Ç–∏ / –¥–∞—Ç—å –±–æ–Ω—É—Å
@dp.message_handler(lambda msg: msg.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users_list(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ã –Ω–µ –ê–¥–º–∏–Ω")
        return

    session = SessionLocal()
    try:
        users = session.query(User).order_by(User.id.desc()).limit(100).all()
        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.")
            return

        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100):\n"
        for u in users:
            text += f"{u.id}: {u.roblox_user or '-'} (TG: {u.telegram_id})\n"

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user"))
        keyboard.add(InlineKeyboardButton("–î–∞—Ç—å –±–æ–Ω—É—Å", callback_data="admin_give_bonus"))
        # —É–¥–∞–ª–µ–Ω–∏–µ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª–æ; —Å–¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫/ID
        await message.answer(text, reply_markup=keyboard)
    finally:
        session.close()

@dp.callback_query_handler(lambda c: c.data == "admin_find_user")
async def admin_find_user_start(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    user_states[admin_id] = {"mode": "admin_user_find", "step": "await_query"}
    await callback_query.message.answer("–í–≤–µ–¥–∏ Telegram ID –∏–ª–∏ –Ω–∏–∫ Roblox –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "admin_give_bonus")
async def admin_give_bonus_start(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    user_states[admin_id] = {"mode": "admin_give_bonus", "step": "await_user"}
    await callback_query.message.answer("–í–≤–µ–¥–∏ Telegram ID –∏–ª–∏ –Ω–∏–∫ Roblox –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –¥–∞—Ç—å –±–æ–Ω—É—Å:")
    await callback_query.answer()

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_user_find"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_query")
async def admin_find_user_receive(message: types.Message):
    query = message.text.strip()
    session = SessionLocal()
    try:
        user = None
        if query.isdigit():
            user = session.query(User).filter_by(telegram_id=int(query)).first()
        if not user:
            user = session.query(User).filter_by(roblox_user=query).first()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            info = (
                f"ID: {user.id}\n"
                f"Telegram: {user.telegram_id}\n"
                f"Roblox: {user.roblox_user}\n"
                f"–ë–∞–ª–∞–Ω—Å: {getattr(user,'balance',0)} –æ—Ä–µ—à–∫–æ–≤\n"
                f"–ö–µ—à: {getattr(user,'cash',0)}\n"
                f"–ü—Ä–µ–¥–º–µ—Ç—ã: {user.items}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {getattr(user,'level',0)}\n"
                f"–í—Ä–µ–º—è: {getattr(user,'play_time',0)}\n"
                f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {getattr(user,'referrals',0)}"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_delete_user_{user.id}"))
            await message.answer(info, reply_markup=keyboard)
    finally:
        session.close()
        user_states.pop(message.from_user.id, None)

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_give_bonus"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_user")
async def admin_give_bonus_receive_user(message: types.Message):
    admin_id = message.from_user.id
    query = message.text.strip()
    session = SessionLocal()
    try:
        user = None
        if query.isdigit():
            user = session.query(User).filter_by(telegram_id=int(query)).first()
        if not user:
            user = session.query(User).filter_by(roblox_user=query).first()

        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states.pop(admin_id, None)
            return

        user_states[admin_id]["target_user_id"] = user.id
        user_states[admin_id]["step"] = "await_amount"
        await message.answer("–£–∫–∞–∂–∏ —Å—É–º–º—É –≤ –æ—Ä–µ—à–∫–∞—Ö –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    finally:
        session.close()

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_give_bonus"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_amount")
async def admin_give_bonus_receive_amount(message: types.Message):
    admin_id = message.from_user.id
    st = user_states.get(admin_id)
    if not st:
        await message.answer("–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return
    try:
        amount = int(message.text.strip())
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    session = SessionLocal()
    try:
        user = session.query(User).filter_by(id=st["target_user_id"]).first()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            user.balance = (getattr(user, "balance", 0) or 0) + amount
            session.commit()
            await message.answer(f"‚úÖ {amount} –æ—Ä–µ—à–∫–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.roblox_user or user.telegram_id}.")
    finally:
        session.close()
        user_states.pop(admin_id, None)

@dp.callback_query_handler(lambda c: c.data.startswith("admin_delete_user_"))
async def admin_delete_user_confirm(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    user_id = int(callback_query.data.split("_")[-1])
    session = SessionLocal()
    try:
        user = session.query(User).filter_by(id=user_id).first()
        if not user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        session.delete(user)
        session.commit()
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.roblox_user or user.telegram_id} —É–¥–∞–ª—ë–Ω.")
        await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.roblox_user or user.telegram_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î.")
    finally:
        session.close()

# -----------------------------
# --- –ê–¥–º–∏–Ω: –°–µ—Ä–≤–µ—Ä–∞ (CRUD) ---
# -----------------------------
@dp.message_handler(lambda msg: msg.text == "–°–µ—Ä–≤–µ—Ä–∞")
async def admin_servers_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ã –Ω–µ –ê–¥–º–∏–Ω")
        return
    session = SessionLocal()
    try:
        servers = session.query(Server).order_by(Server.number.asc()).all()
        text = "üéÆ –°–µ—Ä–≤–µ—Ä–∞:\n"
        for s in servers:
            text += f"{s.id}: –°–µ—Ä–≤–µ—Ä {s.number} ‚Äî {'üîó' if s.link else '‚ùå'}\n"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="admin_add_server"))
        if servers:
            keyboard.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä", callback_data="admin_del_last_server"))
        await message.answer(text, reply_markup=keyboard)
    finally:
        session.close()

@dp.callback_query_handler(lambda c: c.data == "admin_add_server")
async def admin_add_server_start(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    user_states[admin_id] = {"mode": "admin_servers_add", "step": "await_number"}
    await callback_query.message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1):")
    await callback_query.answer()

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_servers_add"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_number")
async def admin_add_server_number(message: types.Message):
    admin_id = message.from_user.id
    try:
        number = int(message.text.strip())
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    session = SessionLocal()
    try:
        exists = session.query(Server).filter_by(number=number).first()
        if exists:
            await message.answer("–°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –µ—Å—Ç—å.")
            user_states.pop(admin_id, None)
            return
        # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ —Å—Å—ã–ª–∫–∏)
        new = Server(number=number, link=None)
        session.add(new)
        session.commit()
        await message.answer(f"–°–µ—Ä–≤–µ—Ä {number} —Å–æ–∑–¥–∞–Ω (–±–µ–∑ —Å—Å—ã–ª–∫–∏). –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ '–°–µ—Ä–≤–µ—Ä–∞' -> —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    finally:
        session.close()
        user_states.pop(admin_id, None)

@dp.callback_query_handler(lambda c: c.data == "admin_del_last_server")
async def admin_delete_last_server(callback_query: types.CallbackQuery):
    session = SessionLocal()
    try:
        last = session.query(Server).order_by(Server.number.desc()).first()
        if not last:
            await callback_query.answer("–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        number = last.number
        session.delete(last)
        session.commit()
        await callback_query.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä {number} —É–¥–∞–ª—ë–Ω.")
        await callback_query.message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä {number} —É–¥–∞–ª—ë–Ω.")
    finally:
        session.close()

# -----------------------------
# --- –ê–¥–º–∏–Ω: –ü—Ä–æ–º–æ–∫–æ–¥—ã (CRUD) ---
# -----------------------------
@dp.message_handler(lambda msg: msg.text == "–ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def admin_promos_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ã –Ω–µ –ê–¥–º–∏–Ω")
        return
    session = SessionLocal()
    try:
        codes = session.query(PromoCode).order_by(PromoCode.id.desc()).all()
        text = "üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        for c in codes:
            expires = c.expires_at.strftime("%Y-%m-%d %H:%M") if c.expires_at else "‚Äî"
            maxu = "‚àû" if c.max_uses == 0 else str(c.max_uses)
            text += f"{c.id}: {c.code} | {c.type}={c.value} | used {c.uses}/{maxu} | exp {expires}\n"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo"))
        if codes:
            keyboard.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_delete_promo"))
        await message.answer(text, reply_markup=keyboard)
    finally:
        session.close()

@dp.callback_query_handler(lambda c: c.data == "admin_create_promo")
async def admin_create_promo_start(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    user_states[admin_id] = {"mode": "admin_create_promo", "step": "await_type"}
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞: –Ω–∞–ø–∏—à–∏ `cash` (–∫–µ—à), `item` (–ø—Ä–µ–¥–º–µ—Ç), `discount` (—Å–∫–∏–¥–∫–∞ –≤ %), `admin` (–¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω–∫—É).")
    await callback_query.answer()

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_create_promo"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_type")
async def admin_create_promo_type(message: types.Message):
    admin_id = message.from_user.id
    ptype = message.text.strip().lower()
    if ptype not in ("cash", "item", "discount", "admin"):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –í—ã–±–µ—Ä–∏: cash, item, discount, admin.")
        return
    user_states[admin_id].update({"ptype": ptype, "step": "await_value"})
    await message.answer("–£–∫–∞–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ:\n- cash: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ—à–∞ (—Ü–µ–ª–æ–µ),\n- item: id –ø—Ä–µ–¥–º–µ—Ç–∞ (—Ü–µ–ª–æ–µ),\n- discount: –ø—Ä–æ—Ü–µ–Ω—Ç (—Ü–µ–ª–æ–µ),\n- admin: —É–∫–∞–∂–∏ 1 (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ).")

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_create_promo"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_value")
async def admin_create_promo_value(message: types.Message):
    admin_id = message.from_user.id
    st = user_states.get(admin_id)
    if not st:
        await message.answer("–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return
    try:
        value = int(message.text.strip())
    except:
        if st["ptype"] == "admin":
            value = 0
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            return

    st["value"] = value
    st["step"] = "await_max_uses"
    await message.answer("–£–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—á–∏—Å–ª–æ) –∏–ª–∏ 0 –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ:")

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_create_promo"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_max_uses")
async def admin_create_promo_max_uses(message: types.Message):
    admin_id = message.from_user.id
    st = user_states.get(admin_id)
    if not st:
        await message.answer("–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return
    try:
        max_uses = int(message.text.strip())
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    st["max_uses"] = max_uses
    st["step"] = "await_expiry_type"
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –Ω–∞–ø–∏—à–∏ `minutes`, `hours`, `days`, –∏–ª–∏ `never`:")

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_create_promo"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_expiry_type")
async def admin_create_promo_expiry_type(message: types.Message):
    admin_id = message.from_user.id
    st = user_states.get(admin_id)
    if not st:
        await message.answer("–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return
    choice = message.text.strip().lower()
    if choice not in ("minutes", "hours", "days", "never"):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. minutes/hours/days/never")
        return
    st["expiry_choice"] = choice
    if choice == "never":
        st["expires_at"] = None
        st["step"] = "await_code"
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä bigbob2025):")
        return
    st["step"] = "await_expiry_amount"
    await message.answer(f"–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {choice} (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_create_promo"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_expiry_amount")
async def admin_create_promo_expiry_amount(message: types.Message):
    admin_id = message.from_user.id
    st = user_states.get(admin_id)
    if not st:
        await message.answer("–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return
    try:
        amount = int(message.text.strip())
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    choice = st["expiry_choice"]
    now = datetime.utcnow()
    if choice == "minutes":
        expires = now + timedelta(minutes=amount)
    elif choice == "hours":
        expires = now + timedelta(hours=amount)
    else:
        expires = now + timedelta(days=amount)
    st["expires_at"] = expires
    st["step"] = "await_code"
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä bigbob2025):")

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_create_promo"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_code")
async def admin_create_promo_code(message: types.Message):
    admin_id = message.from_user.id
    st = user_states.get(admin_id)
    if not st:
        await message.answer("–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return
    code = message.text.strip()
    session = SessionLocal()
    try:
        exists = session.query(PromoCode).filter_by(code=code).first()
        if exists:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            user_states.pop(admin_id, None)
            return
        promo = PromoCode(
            code=code,
            type=st["ptype"],
            value=st["value"],
            uses=0,
            max_uses=st["max_uses"],
            expires_at=st.get("expires_at")
        )
        session.add(promo)
        session.commit()
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω ‚úÖ")
    finally:
        session.close()
        user_states.pop(admin_id, None)

@dp.callback_query_handler(lambda c: c.data == "admin_delete_promo")
async def admin_delete_promo_start(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    user_states[admin_id] = {"mode": "admin_delete_promo", "step": "await_code"}
    await callback_query.message.answer("–í–≤–µ–¥–∏ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await callback_query.answer()

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_delete_promo"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_code")
async def admin_delete_promo_receive(message: types.Message):
    admin_id = message.from_user.id
    code = message.text.strip()
    session = SessionLocal()
    try:
        promo = session.query(PromoCode).filter_by(code=code).first()
        if not promo:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states.pop(admin_id, None)
            return
        session.delete(promo)
        session.commit()
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª—ë–Ω.")
    finally:
        session.close()
        user_states.pop(admin_id, None)

# -----------------------------
# --- –ê–¥–º–∏–Ω: –ú–∞–≥–∞–∑–∏–Ω (CRUD) ---
# -----------------------------
@dp.message_handler(lambda msg: msg.text == "–ú–∞–≥–∞–∑–∏–Ω")
async def admin_shop_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢—ã –Ω–µ –ê–¥–º–∏–Ω")
        return
    session = SessionLocal()
    try:
        items = session.query(Item).order_by(Item.id.asc()).all()
        text = "üõí –¢–æ–≤–∞—Ä—ã:\n"
        for i in items:
            text += f"{i.id}: {i.name} ‚Äî {i.price} –æ—Ä–µ—à–∫–æ–≤ ‚Äî {'–∞–∫—Ç–∏–≤–µ–Ω' if i.available else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_item"))
        if items:
            keyboard.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_del_item"))
        await message.answer(text, reply_markup=keyboard)
    finally:
        session.close()

@dp.callback_query_handler(lambda c: c.data == "admin_add_item")
async def admin_add_item_start(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    user_states[admin_id] = {"mode": "admin_add_item", "step": "await_name"}
    await callback_query.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await callback_query.answer()

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_add_item"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_name")
async def admin_add_item_name(message: types.Message):
    admin_id = message.from_user.id
    name = message.text.strip()
    user_states[admin_id] = {"mode": "admin_add_item", "step": "await_price", "name": name}
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ –æ—Ä–µ—à–∫–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("mode") == "admin_add_item"
                    and user_states.get(msg.from_user.id, {}).get("step") == "await_price")
async def admin_add_item_price(message: types.Message):
    admin_id = message.from_user.id
    st = user_states.get(admin_id)
    if not st:
        await message.answer("–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return
    try:
        price = int(message.text.strip())
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    session = SessionLocal()
    try:
        item = Item(name=st["name"], price=price, available=True)
        session.add(item)
        session.commit()
        await message.answer(f"–¢–æ–≤–∞—Ä '{st['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ —Ü–µ–Ω–µ {price} –æ—Ä–µ—à–∫–æ–≤.")
    finally:
        session.close()
        user_states.pop(admin_id, None)

@dp.callback_query_handler(lambda c: c.data == "admin_del_item")
async def admin_del_item_start(callback_query: types.CallbackQuery):
    admin_id = callback_query.from_user.id
    session = SessionLocal()
    try:
        items = session.query(Item).all()
        if not items:
            await callback_query.message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await callback_query.answer()
            return
        keyboard = InlineKeyboardMarkup()
        for i in items:
            keyboard.add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {i.name}", callback_data=f"admin_del_item_{i.id}"))
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    finally:
        session.close()
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("admin_del_item_"))
async def admin_del_item_confirm(callback_query: types.CallbackQuery):
    item_id = int(callback_query.data.split("_")[-1])
    session = SessionLocal()
    try:
        item = session.query(Item).filter_by(id=item_id).first()
        if not item:
            await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        session.delete(item)
        session.commit()
        await callback_query.answer(f"–¢–æ–≤–∞—Ä {item.name} —É–¥–∞–ª—ë–Ω.")
        await callback_query.message.answer(f"–¢–æ–≤–∞—Ä {item.name} —É–¥–∞–ª—ë–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.")
    finally:
        session.close()

# -----------------------------
# --- Flask endpoint –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ Roblox ---
# -----------------------------
@app.route('/update_player', methods=["POST"])
def update_player():
    data = request.json
    try:
        session = SessionLocal()
        user = session.query(User).filter_by(roblox_user=data.get("username")).first()
        if user is None:
            # –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            user = User(
                telegram_id=None,
                roblox_user=data.get("username"),
                verified=False,
                balance=0,
                cash=data.get("cash", 0),
                items=data.get("items", ""),
                level=data.get("level", 0),
                play_time=data.get("play_time", 0),
                referrals=0
            )
            session.add(user)
            session.commit()
        else:
            user.level = data.get("level", user.level)
            user.cash = data.get("cash", user.cash)
            user.items = data.get("items", user.items)
            user.play_time = data.get("play_time", user.play_time)
            session.commit()
        session.close()
        return {"status": "ok"}, 200
    except Exception as e:
        return {"error": str(e)}, 500

# -----------------------------
# --- Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
# -----------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    # –ü–æ–ª—É—á–∞–µ–º update –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ aiogram
    update = types.Update.to_object(request.get_json(force=True))
    asyncio.create_task(dp.process_update(update))
    return "OK", 200

# -----------------------------
# --- –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞ ---
# -----------------------------
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL_FULL)

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
